import os
from datetime import datetime
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters
)

# ---- –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ ----
(
    ADD_INFO_TIME, ADD_INFO_TYPE, ADD_INFO_TEXT, ADD_INFO_PHOTO,
    ADD_INTERVAL_CHANNEL, ADD_INTERVAL_ON, ADD_INTERVAL_OFF,
    REMOVE_INFO_SELECT, REMOVE_INTERVAL_CHANNEL, REMOVE_INTERVAL_SELECT,
    BROADCAST_TYPE, BROADCAST_TEXT, BROADCAST_PHOTO, BROADCAST_CONFIRM,
    CONFIRM_RELOAD, CONFIRM_PAUSE_ALL
) = range(16)

# ---- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ----
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["‚ö° –ì—Ä–∞—Ñ—ñ–∫–∏", "üí¨ –Ü–Ω—Ñ–æ"],
        ["üîå –ö–∞–Ω–∞–ª–∏", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì° –°—Ç–∞—Ç—É—Å"],
        ["üïì –Ü—Å—Ç–æ—Ä—ñ—è", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
    ],
    resize_keyboard=True
)

# ---- –•–µ–ª–ø–µ—Ä –¥–æ—Å—Ç—É–ø—É ----
def _guard_admin(update: Update) -> bool:
    from bot import is_admin
    uid = (update.effective_user.id if update.effective_user else 0)
    return is_admin(uid)


# ---- Entry ----
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _guard_admin(update):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    await update.message.reply_text("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=MAIN_MENU)


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _guard_admin(update):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")

    text = update.message.text

    # --- –ì—Ä–∞—Ñ—ñ–∫–∏ ---
    if text == "‚ö° –ì—Ä–∞—Ñ—ñ–∫–∏":
        buttons = [
            [InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data="show_schedule")],
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="add_interval_dialog")],
            [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="remove_interval_dialog")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        await update.message.reply_text("‚ö° –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏:", reply_markup=InlineKeyboardMarkup(buttons))

    # --- –Ü–Ω—Ñ–æ ---
    elif text == "üí¨ –Ü–Ω—Ñ–æ":
        buttons = [
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="show_info")],
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="add_info_dialog")],
            [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data="remove_info_dialog")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        await update.message.reply_text("üí¨ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(buttons))

    # --- –ö–∞–Ω–∞–ª–∏ ---
    elif text == "üîå –ö–∞–Ω–∞–ª–∏":
        buttons = [
            [InlineKeyboardButton("‚è∏ –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="pause_channel")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="resume_channel")],
            [InlineKeyboardButton("üîÅ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ", callback_data="resume_all")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ", callback_data="pause_all_confirm")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        await update.message.reply_text("üîå –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=InlineKeyboardMarkup(buttons))

    # --- –†–æ–∑—Å–∏–ª–∫–∞ ---
    elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
        buttons = [
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="broadcast_text")],
            [InlineKeyboardButton("üñº –§–æ—Ç–æ", callback_data="broadcast_photo")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]
        await update.message.reply_text("üì¢ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))

    # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        from bot import scheduler
        total_msgs = len(scheduler.history)
        paused = len(scheduler.paused_channels)
        await update.message.reply_text(
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üì¨ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_msgs}\n"
            f"‚è∏ –ö–∞–Ω–∞–ª—ñ–≤ –Ω–∞ –ø–∞—É–∑—ñ: {paused}\n"
            f"üïì –û—Å—Ç–∞–Ω–Ω—ñ–π reload: {scheduler.last_reload}"
        )

    # --- –°—Ç–∞—Ç—É—Å ---
    elif text == "üì° –°—Ç–∞—Ç—É—Å":
        from bot import scheduler, CHANNEL_IDS
        msg = "üì° –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–∞–Ω–∞–ª—ñ–≤:\n"
        for i, ch in enumerate(CHANNEL_IDS):
            msg += f"#{i} ‚Äî {'üî¥ –ù–∞ –ø–∞—É–∑—ñ' if scheduler.is_channel_paused(ch) else 'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π'}\n"
        await update.message.reply_text(msg)

    # --- –Ü—Å—Ç–æ—Ä—ñ—è ---
    elif text == "üïì –Ü—Å—Ç–æ—Ä—ñ—è":
        from bot import show_history
        await show_history(update, context)

    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        buttons = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏", callback_data="reload_confirm")],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", callback_data="backup_json")],
            [InlineKeyboardButton("üßæ –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏", callback_data="show_logs")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        await update.message.reply_text("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(buttons))


# ---------- CALLBACKS ----------
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _guard_admin(update):
        return await update.callback_query.answer("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

    q = update.callback_query
    data = q.data
    await q.answer()

    from bot import show_schedule, show_info_schedule, scheduler, CHANNEL_IDS
    from bot import pause_notifications, resume_notifications, pause_channel_cmd, resume_channel_cmd

    if data == "back_main":
        await q.message.reply_text("üìã –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=MAIN_MENU)

    # –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫—ñ–≤
    elif data == "show_schedule":
        await show_schedule(update, context)

    elif data == "show_info":
        await show_info_schedule(update, context)

    # –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—ñ–≤ ‚Äî –ø—ñ–¥—Ö–æ–ø–ª—é—é—Ç—å ConversationHandlers (–Ω–∏–∂—á–µ)
    elif data == "add_info_dialog":
        await q.message.reply_text("üïì –í–∫–∞–∂—ñ—Ç—å —á–∞—Å (HH:MM):", reply_markup=ReplyKeyboardRemove())
        return

    elif data == "add_interval_dialog":
        # –ø–æ—á–∞—Ç–æ–∫ —ñ–Ω—à–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É ‚Äî —Ç–∞–∫–æ–∂ –Ω–∏–∂—á–µ
        return

    # –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥–∏ (—Ç–∞–∫–æ–∂ —Ä–æ–∑–ø–∏—Å–∞–Ω–æ –Ω–∏–∂—á–µ)
    elif data == "remove_info_dialog":
        return

    elif data == "remove_interval_dialog":
        return

    # –∫–∞–Ω–∞–ª–∏
    elif data == "resume_all":
        await resume_notifications(update, context)

    elif data == "pause_channel":
        await q.message.reply_text("–í–∫–∞–∂—ñ—Ç—å: /pause_channel <—ñ–Ω–¥–µ–∫—Å>")

    elif data == "resume_channel":
        await q.message.reply_text("–í–∫–∞–∂—ñ—Ç—å: /resume_channel <—ñ–Ω–¥–µ–∫—Å>")

    # reload/backup/logs
    elif data == "reload_confirm":
        from bot import reload_schedules
        await q.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—é...")
        await reload_schedules(update, context)

    elif data == "backup_json":
        backup_dir = "backup"
        os.makedirs(backup_dir, exist_ok=True)
        done = []
        for fname in ["schedule.json", "info_schedule.json"]:
            if os.path.exists(fname):
                bname = f"{backup_dir}/{fname.split('.')[0]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                try:
                    with open(fname, "rb") as src, open(bname, "wb") as dst:
                        dst.write(src.read())
                    done.append(bname)
                except Exception:
                    pass
        await q.message.reply_text("üíæ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ:\n" + ("\n".join(done) if done else "–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤"))

    elif data == "show_logs":
        log_file = "admin_actions.log"
        if not os.path.exists(log_file):
            return await q.message.reply_text("‚ÑπÔ∏è –õ–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        with open(log_file, "r", encoding="utf-8") as f:
            logs = f.read()[-3000:] or "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
        await q.message.reply_text(f"üßæ –û—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó:\n```\n{logs}\n```", parse_mode="Markdown")

    elif data == "pause_all_confirm":
        buttons = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="pause_all_yes")],
            [InlineKeyboardButton("‚ùå –ù—ñ", callback_data="back_main")]
        ]
        await q.message.reply_text("‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –í–°–Ü –∫–∞–Ω–∞–ª–∏?",
                                   reply_markup=InlineKeyboardMarkup(buttons))

    elif data == "pause_all_yes":
        scheduler.paused = True
        for ch in CHANNEL_IDS:
            scheduler.pause_channel(ch)
        await q.message.reply_text("‚è∏ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)


# ---------- –î–Ü–ê–õ–û–ì–ò –î–û–î–ê–í–ê–ù–ù–Ø –Ü–ù–§–û ----------
async def add_info_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["info_time"] = update.message.text.strip()
    buttons = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="info_type_text")],
        [InlineKeyboardButton("üñº –§–æ—Ç–æ", callback_data="info_type_photo")]
    ]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:", reply_markup=InlineKeyboardMarkup(buttons))
    return ADD_INFO_TYPE

async def add_info_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    tp = "text" if "text" in update.callback_query.data else "photo"
    context.user_data["info_type"] = tp
    if tp == "text":
        await update.callback_query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç:")
        return ADD_INFO_TEXT
    else:
        await update.callback_query.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º:")
        return ADD_INFO_PHOTO

async def add_info_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from bot import scheduler
    scheduler.add_info_message(context.user_data["info_time"], "text", text=update.message.text.strip())
    await update.message.reply_text("‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ-—Ç–µ–∫—Å—Ç.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def add_info_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from bot import scheduler
    photo_id = update.message.photo[-1].file_id
    caption = update.message.caption or ""
    scheduler.add_info_message(context.user_data["info_time"], "photo", photo=photo_id, caption=caption)
    await update.message.reply_text("üñº –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ-—Ñ–æ—Ç–æ.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# ---------- –î–Ü–ê–õ–û–ì–ò –î–û–î–ê–í–ê–ù–ù–Ø –Ü–ù–¢–ï–†–í–ê–õ–£ ----------
async def add_interval_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    from bot import CHANNEL_IDS
    buttons = [[InlineKeyboardButton(f"#{i} ‚Äî {cid}", callback_data=f"interval_ch_{i}")]
               for i, cid in enumerate(CHANNEL_IDS)]
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(buttons))
    return ADD_INTERVAL_CHANNEL

async def add_interval_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data["interval_idx"] = int(update.callback_query.data.split("_")[-1])
    await update.callback_query.message.reply_text("‚è∞ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è (HH:MM):", reply_markup=ReplyKeyboardRemove())
    return ADD_INTERVAL_ON

async def add_interval_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["interval_on"] = update.message.text.strip()
    await update.message.reply_text("‚ö° –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤–∏–º–∫–Ω–µ–Ω–Ω—è (HH:MM):")
    return ADD_INTERVAL_OFF

async def add_interval_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from bot import scheduler, CHANNEL_IDS
    idx = context.user_data["interval_idx"]
    ch_id = CHANNEL_IDS[idx]
    on_s = context.user_data["interval_on"]
    off_s = update.message.text.strip()
    on_t = datetime.strptime(on_s, "%H:%M").time()
    off_t = datetime.strptime(off_s, "%H:%M").time()
    scheduler.channels.setdefault(ch_id, []).append({"on": on_t, "off": off_t})
    scheduler.update_schedule(scheduler.channels)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è #{idx} ({ch_id}): ON {on_s} | OFF {off_s}",
                                    reply_markup=MAIN_MENU)
    return ConversationHandler.END

# ---------- –î–Ü–ê–õ–û–ì –í–ò–î–ê–õ–ï–ù–ù–Ø –Ü–ù–§–û ----------
async def remove_info_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    from bot import scheduler
    info = scheduler.info_schedule
    if not info:
        await update.callback_query.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        return ConversationHandler.END
    buttons = []
    for i, m in enumerate(info, 1):
        pv = m.get("text") or m.get("caption") or ""
        if len(pv) > 30:
            pv = pv[:30] + "..."
        buttons.append([InlineKeyboardButton(f"{i}. {m['time']} ‚Äî {pv}", callback_data=f"remove_info_{i}")])
    buttons.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
    await update.callback_query.message.reply_text("üóë –û–±–µ—Ä—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(buttons))
    return REMOVE_INFO_SELECT

async def remove_info_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    idx = int(update.callback_query.data.split("_")[-1]) - 1
    from bot import scheduler, show_info_schedule
    info = scheduler.info_schedule
    if 0 <= idx < len(info):
        removed = info.pop(idx)
        scheduler.save_info_schedule()
        scheduler._schedule_all()
        pv = removed.get("text") or removed.get("caption") or ""
        if len(pv) > 100:
            pv = pv[:100] + "..."
        await update.callback_query.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {removed['time']} ‚Äî {pv}")
        await show_info_schedule(update, context)
    else:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
    return ConversationHandler.END

# ---------- –î–Ü–ê–õ–û–ì –í–ò–î–ê–õ–ï–ù–ù–Ø –Ü–ù–¢–ï–†–í–ê–õ–£ ----------
async def remove_interval_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    from bot import CHANNEL_IDS
    buttons = [[InlineKeyboardButton(f"#{i} ‚Äî {cid}", callback_data=f"rem_ch_{i}")]
               for i, cid in enumerate(CHANNEL_IDS)]
    buttons.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(buttons))
    return REMOVE_INTERVAL_CHANNEL

async def remove_interval_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    idx = int(update.callback_query.data.split("_")[-1])
    context.user_data["remove_ch_idx"] = idx
    from bot import scheduler, CHANNEL_IDS
    ch_id = CHANNEL_IDS[idx]
    intervals = scheduler.channels.get(ch_id, [])
    if not intervals:
        await update.callback_query.message.reply_text("‚ÑπÔ∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –Ω–µ–º–∞—î.")
        return ConversationHandler.END
    buttons = []
    for j, t in enumerate(intervals, 1):
        buttons.append([InlineKeyboardButton(f"{j}. ON {t['on'].strftime('%H:%M')} | OFF {t['off'].strftime('%H:%M')}",
                                             callback_data=f"rem_iv_{j}")])
    buttons.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
    await update.callback_query.message.reply_text("–û–±—Ä–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª:", reply_markup=InlineKeyboardMarkup(buttons))
    return REMOVE_INTERVAL_SELECT

async def remove_interval_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    iv_idx = int(update.callback_query.data.split("_")[-1]) - 1
    from bot import scheduler, CHANNEL_IDS, show_schedule
    ch_idx = context.user_data["remove_ch_idx"]
    ch_id = CHANNEL_IDS[ch_idx]
    arr = scheduler.channels.get(ch_id, [])
    if 0 <= iv_idx < len(arr):
        removed = arr.pop(iv_idx)
        scheduler.update_schedule(scheduler.channels)
        await update.callback_query.message.reply_text(
            f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ON {removed['on'].strftime('%H:%M')} | OFF {removed['off'].strftime('%H:%M')}"
        )
        await show_schedule(update, context)
    else:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª.")
    return ConversationHandler.END

# ---------- –†–û–ó–°–ò–õ–ö–ê –í–Ü–ó–ê–†–î ----------
async def broadcast_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="br_text")],
        [InlineKeyboardButton("üñº –§–æ—Ç–æ", callback_data="br_photo")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ]
    await update.message.reply_text("üì¢ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))
    return BROADCAST_TYPE

async def broadcast_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    dt = update.callback_query.data
    if dt == "br_text":
        context.user_data["br_type"] = "text"
        await update.callback_query.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç:")
        return BROADCAST_TEXT
    elif dt == "br_photo":
        context.user_data["br_type"] = "photo"
        await update.callback_query.message.reply_text("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º:")
        return BROADCAST_PHOTO

async def broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["br_content"] = {"text": update.message.text.strip()}
    buttons = [[InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="br_send")],
               [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
    await update.message.reply_text(f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:\n\n{context.user_data['br_content']['text']}",
                                    reply_markup=InlineKeyboardMarkup(buttons))
    return BROADCAST_CONFIRM

async def broadcast_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_id = update.message.photo[-1].file_id
    caption = update.message.caption or ""
    context.user_data["br_content"] = {"photo": photo_id, "caption": caption}
    buttons = [[InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="br_send")],
               [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
    await update.message.reply_photo(photo=photo_id, caption=f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:\n\n{caption}",
                                     reply_markup=InlineKeyboardMarkup(buttons))
    return BROADCAST_CONFIRM

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    from bot import CHANNEL_IDS, app, scheduler
    tp = context.user_data.get("br_type")
    data = context.user_data.get("br_content", {})
    if tp == "text":
        txt = data.get("text", "")
        for ch in CHANNEL_IDS:
            try:
                await app.bot.send_message(ch, txt)
                scheduler.add_to_history(ch, "broadcast", txt)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É {ch}: {e}")
        await update.callback_query.message.reply_text("‚úÖ –†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=MAIN_MENU)
    else:
        photo = data.get("photo")
        caption = data.get("caption", "")
        for ch in CHANNEL_IDS:
            try:
                await app.bot.send_photo(ch, photo=photo, caption=caption)
                scheduler.add_to_history(ch, "broadcast_photo", caption)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É {ch}: {e}")
        await update.callback_query.message.reply_text("‚úÖ –§–æ—Ç–æ-—Ä–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# ---------- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è ----------
async def cancel_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)
        else:
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)
    except Exception:
        pass
    return ConversationHandler.END

# ---------- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ app ----------
def register_admin_menu(app):
    # –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    app.add_handler(CommandHandler("menu", show_main_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    # –±–∞–∑–æ–≤—ñ callback-–∏
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –¥—ñ–∞–ª–æ–≥: –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ
    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(lambda u, c: None, pattern="^add_info_dialog$"),
                      MessageHandler(filters.Regex("^$"), lambda u, c: None)],
        states={
            ADD_INFO_TYPE: [CallbackQueryHandler(add_info_type, pattern="^info_type_")],
            ADD_INFO_TIME: [MessageHandler(filters.TEXT, add_info_time)],
            ADD_INFO_TEXT: [MessageHandler(filters.TEXT, add_info_text)],
            ADD_INFO_PHOTO: [MessageHandler(filters.PHOTO, add_info_photo)],
        },
        fallbacks=[CallbackQueryHandler(cancel_dialog, pattern="^cancel$")],
        map_to_parent={}
    ))
    # —Ç—Ä–∏–≥–µ—Ä –Ω–∞ "add_info_dialog"
    app.add_handler(CallbackQueryHandler(lambda u, c: add_info_time(u, c), pattern="^add_info_dialog$"))

    # –¥—ñ–∞–ª–æ–≥: –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(add_interval_start, pattern="^add_interval_dialog$")],
        states={
            ADD_INTERVAL_CHANNEL: [CallbackQueryHandler(add_interval_channel, pattern="^interval_ch_\\d+$")],
            ADD_INTERVAL_ON: [MessageHandler(filters.TEXT, add_interval_on)],
            ADD_INTERVAL_OFF: [MessageHandler(filters.TEXT, add_interval_off)],
        },
        fallbacks=[CallbackQueryHandler(cancel_dialog, pattern="^cancel$")]
    ))

    # –¥—ñ–∞–ª–æ–≥: –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Ñ–æ
    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(remove_info_start, pattern="^remove_info_dialog$")],
        states={REMOVE_INFO_SELECT: [CallbackQueryHandler(remove_info_select, pattern="^remove_info_\\d+$")]},
        fallbacks=[CallbackQueryHandler(cancel_dialog, pattern="^cancel$")]
    ))

    # –¥—ñ–∞–ª–æ–≥: –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(remove_interval_start, pattern="^remove_interval_dialog$")],
        states={
            REMOVE_INTERVAL_CHANNEL: [CallbackQueryHandler(remove_interval_channel, pattern="^rem_ch_\\d+$")],
            REMOVE_INTERVAL_SELECT: [CallbackQueryHandler(remove_interval_select, pattern="^rem_iv_\\d+$")],
        },
        fallbacks=[CallbackQueryHandler(cancel_dialog, pattern="^cancel$")]
    ))

    # —Ä–æ–∑—Å–∏–ª–∫–∞-–≤—ñ–∑–∞—Ä–¥ (—á–µ—Ä–µ–∑ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "üì¢ –†–æ–∑—Å–∏–ª–∫–∞" –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é)
    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì¢ –†–æ–∑—Å–∏–ª–∫–∞$"), lambda u, c: broadcast_entry(u, c))],
        states={
            BROADCAST_TYPE: [CallbackQueryHandler(broadcast_type, pattern="^br_")],
            BROADCAST_TEXT: [MessageHandler(filters.TEXT, broadcast_text)],
            BROADCAST_PHOTO: [MessageHandler(filters.PHOTO, broadcast_photo)],
            BROADCAST_CONFIRM: [CallbackQueryHandler(broadcast_send, pattern="^br_send$")],
        },
        fallbacks=[CallbackQueryHandler(cancel_dialog, pattern="^cancel$")]
    ))
