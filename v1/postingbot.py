import os
import threading
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
)

from schedule_manager import ScheduleManager

# watchdog –¥–ª—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è JSON
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# === –ö–æ–Ω—Ñ—ñ–≥ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
CHANNEL_IDS = [int(x.strip()) for x in os.getenv("CHANNEL_IDS", "").split(",") if x.strip()]
TZ = os.getenv("TZ", "Europe/Kyiv")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
app = ApplicationBuilder().token(BOT_TOKEN).build()

# –ë–∞–∑–æ–≤—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç—É (—â–æ–± –±—É–ª–æ —â–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —É schedule.json, —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π)
DEFAULT_SCHEDULE = {
    ch: [
        {"on": datetime.strptime("06:00", "%H:%M").time(), "off": datetime.strptime("08:00", "%H:%M").time()},
        {"on": datetime.strptime("12:00", "%H:%M").time(), "off": datetime.strptime("14:00", "%H:%M").time()},
        {"on": datetime.strptime("18:00", "%H:%M").time(), "off": datetime.strptime("20:00", "%H:%M").time()},
    ]
    for ch in CHANNEL_IDS
}

scheduler = ScheduleManager(app.bot, DEFAULT_SCHEDULE, timezone=TZ)
# —è–∫—â–æ —î —Ñ–∞–π–ª–∏ ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ
'''scheduler.load_schedule()
scheduler.start()'''

# === –î–æ—Å—Ç—É–ø ===
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# === –ö–æ–º–∞–Ω–¥–∏ (—É—Å—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤) ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –¶–µ–π –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –∞–±–æ /menu.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/menu ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ —É –≤—Å—ñ –∫–∞–Ω–∞–ª–∏\n"
        "/update_schedule <idx> <on_HH:MM> <off_HH:MM> ‚Äî –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª\n"
        "/showschedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ ON/OFF\n"
        "/showschedule_info ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/update_info <HH:MM> text <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ-—Ç–µ–∫—Å—Ç\n"
        "/update_info <HH:MM> photo ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–∑ —Ñ–æ—Ç–æ —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º\n"
        "/clear_info <–Ω–æ–º–µ—Ä|all> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Ñ–æ\n"
        "/pause ‚Äî –ø–∞—É–∑–∞ –¥–ª—è –≤—Å—ñ—Ö\n"
        "/resume ‚Äî –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ\n"
        "/pause_channel <idx> ‚Äî –ø–∞—É–∑–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É\n"
        "/resume_channel <idx> ‚Äî –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª\n"
        "/history ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤\n"
        "/reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç–∏ JSON (schedule/info)"
    )

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    if not context.args:
        return await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è /broadcast")
    text = " ".join(context.args)
    for ch in CHANNEL_IDS:
        try:
            await context.bot.send_message(ch, text)
            scheduler.add_to_history(ch, "broadcast", text)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É {ch}: {e}")
    await update.message.reply_text("‚úÖ –†–æ–∑—Å–∏–ª–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ.")

async def send_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ñ–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å -> —Ä–æ–∑—Å–∏–ª–∫–∞
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    caption = update.message.caption or ""
    photo = update.message.photo[-1].file_id
    for ch in CHANNEL_IDS:
        try:
            await context.bot.send_photo(ch, photo=photo, caption=caption)
            scheduler.add_to_history(ch, "broadcast_photo", caption)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É {ch}: {e}")
    await update.message.reply_text("üñº –§–æ—Ç–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ —É –≤—Å—ñ –∫–∞–Ω–∞–ª–∏.")

async def update_schedule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    if len(context.args) < 3:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /update_schedule <—ñ–Ω–¥–µ–∫—Å> <on_HH:MM> <off_HH:MM>")
    try:
        idx = int(context.args[0])
        on_t = datetime.strptime(context.args[1], "%H:%M").time()
        off_t = datetime.strptime(context.args[2], "%H:%M").time()
        ch_id = CHANNEL_IDS[idx]
        scheduler.channels.setdefault(ch_id, []).append({"on": on_t, "off": off_t})
        scheduler.update_schedule(scheduler.channels)
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–Ω–∞–ª—É #{idx}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    text = "üìÖ –ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫:\n\n"
    for i, (ch, intervals) in enumerate(scheduler.channels.items()):
        text += f"#{i} ‚Äî {ch}\n"
        for j, t in enumerate(intervals, 1):
            text += f"  ‚Ä¢ {j}: ON {t['on'].strftime('%H:%M')} | OFF {t['off'].strftime('%H:%M')}\n"
    await update.message.reply_text(text)

async def update_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    # —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    if len(context.args) >= 2 and not update.message.photo:
        time_str = context.args[0]
        msg_type = context.args[1].lower()
        if msg_type != "text":
            return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /update_info <HH:MM> text <—Ç–µ–∫—Å—Ç>")
        text = " ".join(context.args[2:])
        scheduler.add_info_message(time_str, "text", text=text)
        return await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ-—Ç–µ–∫—Å—Ç –Ω–∞ {time_str}")
    # —Ñ–æ—Ç–æ-–≤–∞—Ä—ñ–∞–Ω—Ç
    if update.message.photo:
        if len(context.args) < 1:
            return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /update_info <HH:MM> photo (–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–∑ —Ñ–æ—Ç–æ)")
        time_str = context.args[0]
        photo_id = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        scheduler.add_info_message(time_str, "photo", photo=photo_id, caption=caption)
        return await update.message.reply_text(f"üñº –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ-—Ñ–æ—Ç–æ –Ω–∞ {time_str}")
    await update.message.reply_text(
        "‚ùå –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "/update_info 10:00 text ‚ö° –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "–∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ + /update_info 12:00 photo"
    )

async def show_info_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    info = scheduler.info_schedule
    if not info:
        return await update.message.reply_text("‚ÑπÔ∏è –†–æ–∑–∫–ª–∞–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    txt = "üóìÔ∏è –†–æ–∑–∫–ª–∞–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
    for i, m in enumerate(info, 1):
        kind = "üìù –¢–µ–∫—Å—Ç" if m["type"] == "text" else "üñº –§–æ—Ç–æ"
        preview = m.get("text") or m.get("caption") or ""
        if len(preview) > 100:
            preview = preview[:100] + "..."
        txt += f"{i}. ‚è∞ {m['time']} | {kind}\n   {preview}\n\n"
    await update.message.reply_text(txt)

async def clear_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    if not context.args:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /clear_info <–Ω–æ–º–µ—Ä> –∞–±–æ /clear_info all")
    arg = context.args[0].lower()
    info = scheduler.info_schedule
    if not info:
        return await update.message.reply_text("‚ÑπÔ∏è –†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    try:
        if arg == "all":
            scheduler.info_schedule = []
            scheduler.save_info_schedule()
            scheduler._schedule_all()
            return await update.message.reply_text("üóë –£—Å—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        idx = int(arg) - 1
        if idx < 0 or idx >= len(info):
            return await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
        removed = info.pop(idx)
        scheduler.save_info_schedule()
        scheduler._schedule_all()
        pv = removed.get("text") or removed.get("caption") or ""
        if len(pv) > 100:
            pv = pv[:100] + "..."
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ #{arg} ({removed['time']}): {pv}")
        await show_info_schedule(update, context)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def pause_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    scheduler.pause_notifications()
    await update.message.reply_text("‚è∏ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤.")

async def resume_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    scheduler.resume_notifications()
    scheduler.paused_channels.clear()
    await update.message.reply_text("‚ñ∂Ô∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤.")

async def pause_channel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    if len(context.args) < 1:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /pause_channel <—ñ–Ω–¥–µ–∫—Å>")
    try:
        idx = int(context.args[0])
        ch_id = CHANNEL_IDS[idx]
        scheduler.pause_channel(ch_id)
        await update.message.reply_text(f"‚è∏ –ö–∞–Ω–∞–ª #{idx} ({ch_id}) –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def resume_channel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    if len(context.args) < 1:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /resume_channel <—ñ–Ω–¥–µ–∫—Å>")
    try:
        idx = int(context.args[0])
        ch_id = CHANNEL_IDS[idx]
        scheduler.resume_channel(ch_id)
        await update.message.reply_text(f"‚ñ∂Ô∏è –ö–∞–Ω–∞–ª #{idx} ({ch_id}) –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    entries = scheduler.history[-10:]
    if not entries:
        return await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
    txt = "üïì –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n"
    for e in entries:
        txt += f"[{e['time']}] {e['type'].upper()} ‚Äî {e['channel']}: {e['text']}\n"
    await update.message.reply_text(txt)

async def reload_schedules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
    try:
        scheduler.clear_jobs()
        scheduler.load_schedule()                 # schedule.json
        scheduler.info_schedule = scheduler._load_info_schedule()  # info_schedule.json
        scheduler._schedule_all()
        scheduler.touch_reload_timestamp()
        await update.message.reply_text("üîÑ –ì—Ä–∞—Ñ—ñ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ JSON —Ñ–∞–π–ª—ñ–≤.")
        print("‚úÖ –ü–µ—Ä–µ—á–∏—Ç–∞–Ω–æ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤—Ä—É—á–Ω—É (/reload)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

# === Watchdog –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ===
class FileWatcher(FileSystemEventHandler):
    def __init__(self, scheduler: ScheduleManager):
        self.scheduler = scheduler

    def on_modified(self, event):
        if event.src_path.endswith("schedule.json") or event.src_path.endswith("info_schedule.json"):
            print(f"üìÅ –ó–º—ñ–Ω–µ–Ω–æ —Ñ–∞–π–ª: {event.src_path}. –ü–µ—Ä–µ—á–∏—Ç—É—é –≥—Ä–∞—Ñ—ñ–∫–∏...")
            try:
                self.scheduler.clear_jobs()
                self.scheduler.load_schedule()
                self.scheduler.info_schedule = self.scheduler._load_info_schedule()
                self.scheduler._schedule_all()
                self.scheduler.touch_reload_timestamp()
                print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

def start_file_watcher(scheduler: ScheduleManager):
    observer = Observer()
    observer.schedule(FileWatcher(scheduler), ".", recursive=False)
    observer.start()
    threading.Thread(target=observer.join, daemon=True).start()

# === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ===
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("menu", lambda u, c: None))  # –∑–∞–ø–æ–≤–Ω–∏—Ç—å admin_menu
app.add_handler(CommandHandler("broadcast", broadcast))
app.add_handler(CommandHandler("update_schedule", update_schedule_cmd))
app.add_handler(CommandHandler("showschedule", show_schedule))
app.add_handler(CommandHandler("showschedule_info", show_info_schedule))
app.add_handler(CommandHandler("update_info", update_info))
app.add_handler(CommandHandler("clear_info", clear_info))
app.add_handler(CommandHandler("pause", pause_notifications))
app.add_handler(CommandHandler("resume", resume_notifications))
app.add_handler(CommandHandler("pause_channel", pause_channel_cmd))
app.add_handler(CommandHandler("resume_channel", resume_channel_cmd))
app.add_handler(CommandHandler("history", show_history))
app.add_handler(CommandHandler("reload", reload_schedules))
# —Ñ–æ—Ç–æ —è–∫ —Ä–æ–∑—Å–∏–ª–∫–∞
app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, send_image))

# === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é ===
from admin_menu import register_admin_menu
register_admin_menu(app)

import asyncio

async def main():
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥–∏
    scheduler.load_schedule()
    # –°—Ç–∞—Ä—Ç—É—î–º–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ–π–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    scheduler.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    start_file_watcher(scheduler)
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
