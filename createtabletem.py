#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from lxml import etree
from pathlib import Path
import cairosvg
from PIL import Image, ImageDraw, ImageFont
import re

# === –®–õ–Ø–•–ò ===
INPUT_TEXT = Path("schedule.txt")      # —Ç–µ–∫—Å—Ç —ñ–∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º
SVG_TEMPLATE = Path("template.svg")    # SVG-—à–∞–±–ª–æ–Ω
OUTPUT_SVG = Path("colored.svg")
OUTPUT_PNG = Path("colored.png")

# === –ü–ê–†–ê–ú–ï–¢–†–ò ===
COLOR_ON = "#646E7D"      # –∫–æ–ª—ñ—Ä –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
COLOR_OFF = "#FFDD1F"     # –∫–æ–ª—ñ—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
TEXT = "23 –∂–æ–≤—Ç–Ω—è, —á–µ—Ç–≤–µ—Ä" # —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
TEXT_COLOR = "#222222"     # –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
FONT_PATH = Path("RoadUI-SemiBold.otf") # —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç—É
FONT_SIZE = 28             # —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
TEXT_POSITION = "bottom"   # "top" –∞–±–æ "bottom"
QUEUE_PATTERN = re.compile(r"^(\d+\.\d+)\s+(.+)$")

# ---------------------------------------------------------------
def parse_schedule_text(text: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑–∫–ª–∞–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–∏–ø—É: 1.1 11:00 - 13:00, 19:00 - 21:00"""
    result = {}
    for line in text.strip().splitlines():
        line = line.strip()
        if not line:
            continue
        m = QUEUE_PATTERN.match(line)
        if not m:
            continue
        queue_id, intervals_raw = m.groups()
        parts = [x.strip() for x in intervals_raw.split(",") if x.strip()]
        intervals = []
        for part in parts:
            if "-" not in part:
                continue
            try:
                start, end = [t.strip() for t in part.split("-")]
                # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É
                if not (re.match(r"^\d{1,2}:\d{2}$", start) and re.match(r"^\d{1,2}:\d{2}$", end)):
                    print(f"[!] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É: '{part}' –¥–ª—è —á–µ—Ä–≥–∏ {queue_id}")
                    continue
                intervals.append((start, end))
            except ValueError:
                print(f"[!] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É: '{part}' –¥–ª—è —á–µ—Ä–≥–∏ {queue_id}")
                continue
        if intervals:
            result[queue_id] = intervals
    return result


def get_halfhour_ids(queue_id: str, intervals: list) -> list:
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ —É —Å–ø–∏—Å–æ–∫ id –±–ª–æ–∫—ñ–≤ {queue_id}_{hh}{a|b}"""
    ids = []
    for start, end in intervals:
        try:
            h1, m1 = map(int, start.split(":"))
            h2, m2 = map(int, end.split(":"))
            
            # –û–±—Ä–æ–±–∫–∞ 24:00 —è–∫ –∫—ñ–Ω–µ—Ü—å –¥–Ω—è
            if h2 == 24 and m2 == 00:
                h2 = 23
                m2 = 59 # –í–∫–ª—é—á–Ω–æ –¥–æ –∫—ñ–Ω—Ü—è 23:59
            
            start_min = h1 * 60 + m1
            end_min = h2 * 60 + m2
            
            # –Ø–∫—â–æ end_min 00:00 (–Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å), —Ç—Ä–∞–∫—Ç—É—î–º–æ —è–∫ 24:00 –ø–æ—Ç–æ—á–Ω–æ–≥–æ
            if end_min == 0 and start_min > 0:
                 end_min = 24 * 60

            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —á–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –Ω–µ —Ä–∞–Ω—ñ—à–µ —á–∞—Å—É –ø–æ—á–∞—Ç–∫—É
            if end_min <= start_min:
                # –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 23:00 - 01:00
                if h2 < h1:
                    end_min = (h2 + 24) * 60 + m2
                elif start_min == end_min and m2 > m1:
                    # –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 10:00 - 10:30
                    pass
                else:
                    print(f"[!] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (end <= start): {start}-{end} –¥–ª—è {queue_id}")
                    continue

            for t in range(start_min, end_min, 30):
                hour = (t // 60) % 24
                half = "a" if (t % 60) < 30 else "b"
                ids.append(f"{queue_id}_{hour:02d}{half}")
                
        except Exception as e:
            print(f"[!] –ü–æ–º–∏–ª–∫–∞ –≤ get_halfhour_ids –¥–ª—è {queue_id} ({start}-{end}): {e}")
            continue
    return ids


def recolor_svg(svg_path: Path, colored_ids: set, color_on: str, color_off: str) -> bytes:
    """
    –§–∞—Ä–±—É—î —Ç—ñ–ª—å–∫–∏ <rect> —É —à–∞—Ä—ñ Layer_x0020_1:
    ‚Ä¢ –ï–ª–µ–º–µ–Ω—Ç–∏ –∑ id —É colored_ids ‚Üí color_on
    ‚Ä¢ –Ü–Ω—à—ñ <rect> –∑ id ‚Üí color_off
    ‚Ä¢ –ù–µ —á—ñ–ø–∞—î —Ñ–æ–Ω, —Ä–∞–º–∫–∏, path, —Ç–µ–∫—Å—Ç —Ç–æ—â–æ
    ‚Ä¢ –ü—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ id –º–∞—é—Ç—å –ø—Ä–µ—Ñ—ñ–∫—Å "_"
    """
    ns = {"svg": "http://www.w3.org/2000/svg"}
    parser = etree.XMLParser(remove_blank_text=False)
    tree = etree.parse(str(svg_path), parser)
    root = tree.getroot()

    # –û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ ID: "1.1_00a" —ñ "_1.1_00a"
    wanted = set()
    for _id in colored_ids:
        wanted.add(_id)
        wanted.add(f"_{_id}")

    # –®—É–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —à–∞—Ä (CorelDRAW)
    layer = root.xpath(".//svg:g[@id='Layer_x0020_1']", namespaces=ns)
    scope = layer[0] if layer else root

    # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏, —è–∫—ñ –º–∞—é—Ç—å id
    rects = scope.xpath(".//svg:rect[@id]", namespaces=ns)

    count_total, count_on = 0, 0
    for el in rects:
        el_id = el.get("id")
        if not el_id:
            continue
        count_total += 1

        target_color = color_on if el_id in wanted else color_off

        # inline fill –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î –∫–ª–∞—Å–∏ CorelDRAW (.fil*)
        el.set("fill", target_color)
        style = el.get("style") or ""
        parts = [p for p in style.split(";") if p.strip() and not p.strip().startswith("fill:")]
        parts.append(f"fill:{target_color}")
        el.set("style", ";".join(parts))

        if el_id in wanted:
            count_on += 1

    print(f"[‚úì] –ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {count_total}, –ø–æ—Ñ–∞—Ä–±–æ–≤–∞–Ω–æ: {count_on}")
    return etree.tostring(root, encoding="utf-8", xml_declaration=True)


def svg_to_png(svg_bytes: bytes, out_png: Path):
    if not svg_bytes:
        print("[!] SVG –±–∞–π—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ PNG —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
        return
    try:
        cairosvg.svg2png(bytestring=svg_bytes, write_to=str(out_png))
        print(f"[‚úì] PNG —Å—Ç–≤–æ—Ä–µ–Ω–æ: {out_png}")
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó SVG –≤ PNG (cairosvg): {e}")


# === üÜï –í–ò–ü–†–ê–í–õ–ï–ù–û: –º–∞–ª—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ PNG ===
def add_text_to_image(png_path: Path, text: str, font_path: Path, color: str = "#000", size: int = 24, position: str = "bottom"):
    """–î–æ–¥–∞—î —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–∞—Ç—É) –¥–æ PNG"""
    if not png_path.exists():
        print(f"[!] –ü–æ–º–∏–ª–∫–∞: PNG —Ñ–∞–π–ª {png_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        return
        
    try:
        img = Image.open(png_path)
        draw = ImageDraw.Draw(img)
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è PNG: {e}")
        return

    try:
        font = ImageFont.truetype(str(font_path), size)
    except Exception:
        print("[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π.")
        font = ImageFont.load_default()

    # --- –í–ò–ü–†–ê–í–õ–ï–ù–û ---
    # `draw.textsize()` –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –≤ Pillow 10.0.0
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ font.getlength() –¥–ª—è —à–∏—Ä–∏–Ω–∏
    try:
        text_w = font.getlength(text)
    except Exception:
         # –§–æ–ª–ª–±–µ–∫ –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –≤–µ—Ä—Å—ñ–π Pillow –∞–±–æ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
         text_w = len(text) * (size // 2)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ font.getbbox() –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–∏—Ö –º–µ–∂ —Ç–µ–∫—Å—Ç—É (left, top, right, bottom)
    # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
    try:
        # getbbox –º–æ–∂–µ –∫–∏–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤
        if not text:
            raise ValueError("Text is empty")
        left, top, right, bottom = font.getbbox(text)
    except (ValueError, AttributeError):
        print("[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–∂—ñ —Ç–µ–∫—Å—Ç—É (–º–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π).")
        left, top, right, bottom = (0, 0, 0, size) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –≤–∏—Å–æ—Ç—É = —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É
    # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

    margin = 10

    if position == "bottom":
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        x = (img.width - text_w) // 2
        # --- –í–ò–ü–†–ê–í–õ–ï–ù–û ---
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: –≤—ñ–¥ –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ 'margin' 
        # —ñ –≤–∏—Å–æ—Ç—É —Ç–µ–∫—Å—Ç—É ('bottom' –∑ bbox)
        y = img.height - bottom - margin
        # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---
    else:  # top
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        x = (img.width - text_w) // 2
        # --- –í–ò–ü–†–ê–í–õ–ï–ù–û ---
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: 'margin' –º—ñ–Ω—É—Å 'top' –∑ bbox 
        # (–æ—Å–∫—ñ–ª—å–∫–∏ 'top' –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º)
        y = margin - top
        # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

    draw.text((x, y), text, font=font, fill=color)
    
    try:
        img.save(png_path)
        print(f"[‚úì] –¢–µ–∫—Å—Ç –¥–æ–¥–∞–Ω–æ: {text}")
    except Exception as e:
        print(f"[!] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è PNG –∑ —Ç–µ–∫—Å—Ç–æ–º: {e}")


# ---------------------------------------------------------------
if __name__ == "__main__":
    if not INPUT_TEXT.exists():
        print(f"–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª —Ä–æ–∑–∫–ª–∞–¥—É: {INPUT_TEXT}")
        exit(1)
    if not SVG_TEMPLATE.exists():
        print(f"–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω—É: {SVG_TEMPLATE}")
        exit(1)
    if not FONT_PATH.exists() and TEXT:
         print(f"[!] –£–≤–∞–≥–∞: —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç—É {FONT_PATH} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π.")

    schedule_text = INPUT_TEXT.read_text(encoding="utf-8")
    data = parse_schedule_text(schedule_text)
    if not data:
        print("[!] –†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏.")
        # –í—Å–µ –æ–¥–Ω–æ –≥–µ–Ω–µ—Ä—É—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É (–≤—Å—ñ –±—É–¥—É—Ç—å OFF)
        # exit(1)

    all_ids_to_color = set()
    for queue_id, intervals in data.items():
        ids = get_halfhour_ids(queue_id, intervals)
        all_ids_to_color.update(ids)
    
    if data:
        print(f"[i] –ó —Ä–æ–∑–∫–ª–∞–¥—É –æ—Ç—Ä–∏–º–∞–Ω–æ {len(all_ids_to_color)} ID –ø—ñ–≤–≥–æ–¥–∏–Ω–Ω–∏—Ö –±–ª–æ–∫—ñ–≤.")

    svg_bytes = recolor_svg(SVG_TEMPLATE, all_ids_to_color, COLOR_ON, COLOR_OFF)
    
    if not svg_bytes:
        print("[!] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ SVG. –í–∏—Ö—ñ–¥.")
        exit(1)
        
    OUTPUT_SVG.write_bytes(svg_bytes)
    print(f"[‚úì] –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π SVG –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {OUTPUT_SVG}")

    svg_to_png(svg_bytes, OUTPUT_PNG)

    # === –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É ===
    if TEXT:
        add_text_to_image(OUTPUT_PNG, TEXT, FONT_PATH, TEXT_COLOR, FONT_SIZE, TEXT_POSITION)
    else:
        print("[i] –¢–µ–∫—Å—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫.")
