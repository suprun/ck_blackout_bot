import os
import asyncio
import aiosqlite
import nest_asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)

# === .env ===
load_dotenv()

# === Config ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = os.getenv("DATABASE_PATH", "users.db")
MINIAPP_URL = os.getenv("MINIAPP_URL", "https://cherkasyoblenergo.com/static/perelik-gpv")

QUEUE_EMOJI = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"]
GROUP_LINKS = {f"{i}_{j}": f"https://t.me/ck_blackout_{i}_{j}" for i in range(1, 7) for j in (1, 2)}

# === Logging ===
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# === DB ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                start_time TEXT,
                is_premium INTEGER DEFAULT 0
            )
            """
        )
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS user_queues (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                queue INTEGER,
                subqueue INTEGER,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
            """
        )
        await db.commit()

# === Keyboards ===

def start_keyboard():
    rows = [[InlineKeyboardButton(f"{QUEUE_EMOJI[i]} –ß–µ—Ä–≥–∞", callback_data=f"queue_{i+1}")] for i in range(6)]
    rows.append([InlineKeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é", callback_data="unknown_queue")])
    return InlineKeyboardMarkup(rows)

def sub_keyboard(queue: int):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Ö† –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_1"),
            InlineKeyboardButton("‚Ö° –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_2"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])

def subscription_keyboard(key: str):
    group_url = GROUP_LINKS.get(key, "#")
    queue, sub = key.split("_")
    queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ", url=group_url)],
        [InlineKeyboardButton("üí´ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ", callback_data=f"personal_{key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_queue_{queue}"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
        
    ])

def personal_info_keyboard(key: str, queue_label: str, group_url: str, back_cb: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí¨ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ {queue_label}", url=group_url)],
        [InlineKeyboardButton("üí´ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ –∑–∞ 10 ‚≠êÔ∏è", callback_data=f"buy_{key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])

def unknown_keyboard(back_cb: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É (Mini App)", web_app={"url": MINIAPP_URL})],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)],
    ])

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üìä –ú–æ—ó —á–µ—Ä–≥–∏", "üí´ Premium"], ["üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=False
    )

# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, start_time) VALUES (?, ?, ?, ?)",
            (user.id, user.username, user.first_name, datetime.now().isoformat()),
        )
        await db.commit()

    context.user_data.pop("last_queue_selection", None)

    await update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {user.first_name or '–¥—Ä—É–∂–µ'}!\n‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É:")
    await update.message.reply_text("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É:", reply_markup=start_keyboard())

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def queue_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    queue = int(query.data.split("_")[1])
    context.user_data["last_queue_selection"] = f"back_to_queue_{queue}"
    await query.edit_message_text(
        f"üìä –í–∏ –æ–±—Ä–∞–ª–∏ {QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥—É. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—á–µ—Ä–≥—É:",
        reply_markup=sub_keyboard(queue),
    )

async def sub_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, queue, sub = query.data.split("_")
    key = f"{queue}_{sub}"
    context.user_data["last_queue_selection"] = f"back_to_queue_{queue}"
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT is_premium FROM users WHERE user_id=?", (query.from_user.id,))
        user_row = await cur.fetchone()
        is_premium = user_row and user_row[0] == 1
        if not is_premium:
            await db.execute("DELETE FROM user_queues WHERE user_id=?", (query.from_user.id,))
        await db.execute(
            "INSERT INTO user_queues (user_id, queue, subqueue) VALUES (?, ?, ?)",
            (query.from_user.id, queue, sub),
        )
        await db.commit()
    context.user_data["last_message_callback"] = f"sub_{queue}_{sub}"
    await query.edit_message_text(
        f"üîå –í–∏ –æ–±—Ä–∞–ª–∏ {QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥—É {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥—É.",
        reply_markup=subscription_keyboard(key),
    )

async def personal_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.split("personal_")[1]
    queue, sub = key.split("_")
    queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
    group_url = GROUP_LINKS.get(key, '#')
    description = (
        f"  ‚ú® –ü–µ—Ä–µ–≤–∞–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ –±–æ—Ç—ñ:\n\n"
        f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ 5/10/15 –∞–±–æ 20 —Ö–≤–∏–ª–∏–Ω –¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
        f"üí¨ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–µ–∫—ñ–ª—å–∫–∞ —á–µ—Ä–≥ –≤ –æ–¥–Ω–æ–º—É —á–∞—Ç—ñ\n"
        f"üåô –í–∏–º–∫–Ω–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É –Ω—ñ—á–Ω–∏–π —á–∞—Å\n"
        f"üîï –ë–µ–∑ —Å–ø–∞–º—É, –ª–∏—à–µ –∫–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        f"üôè –í–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —Ü–µ–π –ø—Ä–æ—î–∫—Ç. (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–ª–∞—Ç—ñ–∂ 10 ‚≠êÔ∏è ‚âà10‚Ç¥)\n\n"
        f"–∞–±–æ\n\n"
        f"‚Ä¢ üí¨ –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É ¬´–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å {queue_label}¬ª —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ.\n\n"
    )
    back_cb = context.user_data.get("last_message_callback", f"sub_{queue}_{sub}")
    await query.edit_message_text(description, reply_markup=personal_info_keyboard(key, queue_label, group_url, back_cb))

async def my_queues(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT queue, subqueue FROM user_queues WHERE user_id=?", (user_id,))
        rows = await cur.fetchall()
    if not rows:
        await update.message.reply_text("‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó —á–µ—Ä–≥–∏.")
        return
    text = "üìä –í–∞—à—ñ —á–µ—Ä–≥–∏:\n" + "\n".join([
        f"{QUEUE_EMOJI[q-1]} {q} —á–µ—Ä–≥–∞ {'‚Ö†' if s==1 else '‚Ö°'}" for q, s in rows
    ])
    await update.message.reply_text(text, reply_markup=main_menu_keyboard())

async def unknown_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    back_cb = context.user_data.get("last_queue_selection", "back_to_start")
    text = "üîç –ù–µ –∑–Ω–∞—î—Ç–µ —Å–≤–æ—é —á–µ—Ä–≥—É? –ó–Ω–∞–π–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —É Mini App —ñ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞–∑–∞–¥, —â–æ–± –æ–±—Ä–∞—Ç–∏ —á–µ—Ä–≥—É/–ø—ñ–¥—á–µ—Ä–≥—É."
    await query.edit_message_text(text, reply_markup=unknown_keyboard(back_cb))

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.pop("last_queue_selection", None)
    await query.edit_message_text("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É:", reply_markup=start_keyboard())

async def buy_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.split("buy_")[1]
    prices = [LabeledPrice("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", 10)]
    await context.bot.send_invoice(
        chat_id=query.from_user.id,
        title="‚≠êÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        description="–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É –±–æ—Ç—ñ. –í–∞—Ä—Ç—ñ—Å—Ç—å 10‚≠êÔ∏è",
        payload=f"stars_{key}",
        currency="XTR",
        prices=prices,
        provider_token="",
        start_parameter="personal_alerts",
    )

async def toggle_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT is_premium FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            await db.execute(
                "INSERT INTO users (user_id, username, first_name, start_time, is_premium) VALUES (?, ?, ?, ?, 1)",
                (user_id, update.effective_user.username, update.effective_user.first_name, datetime.now().isoformat()),
            )
            status = True
        else:
            new_status = 0 if row[0] == 1 else 1
            await db.execute("UPDATE users SET is_premium=? WHERE user_id=?", (new_status, user_id))
            status = bool(new_status)
        await db.commit()
    msg = "‚úÖ Premium —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if status else "‚ùå Premium –≤–∏–º–∫–Ω–µ–Ω–æ"
    await update.message.reply_text(msg, reply_markup=main_menu_keyboard())

# === Main ===
async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ. –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ .env –∞–±–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return
    await init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("prem", toggle_premium))
    app.add_handler(CommandHandler("myqueues", my_queues))
    app.add_handler(CallbackQueryHandler(queue_choice, pattern="^queue_"))
    app.add_handler(CallbackQueryHandler(sub_choice, pattern="^sub_"))
    app.add_handler(CallbackQueryHandler(personal_info, pattern="^personal_"))
    app.add_handler(CallbackQueryHandler(unknown_queue, pattern="^unknown_queue$"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    app.add_handler(CallbackQueryHandler(buy_premium, pattern="^buy_"))
    app.add_handler(CallbackQueryHandler(menu_command, pattern="^main_menu$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –º–µ–Ω—é, /myqueues —ñ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Premium")
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())