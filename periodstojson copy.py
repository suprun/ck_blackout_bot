import re
import json
from datetime import datetime, timedelta
from pathlib import Path

# === –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (—Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è–π –Ω–æ–≤–∏–π –ø–æ—Å—Ç) ===
text = """
–û–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ì–ü–í –Ω–∞ 23 –∂–æ–≤—Ç–Ω—è –∑ 14:00 –¥–æ 23:00 –ø–æ –ß–µ—Ä–∫–∞—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.

–ì–æ–¥–∏–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –ø–æ —á–µ—Ä–≥–∞–º (–ø—ñ–¥—á–µ—Ä–≥–∞–º):

1.1 19:00 - 21:00
1.2 19:00 - 21:00

3.1 14:00 - 15:00, 21:00 - 23:00
3.2 14:00 - 15:00, 21:00 - 23:00

4.1 15:00 - 17:00
4.2 15:00 - 17:00

6.1 17:00 - 19:00
6.2 17:00 - 19:00
""".strip()


# === –°–ª–æ–≤–Ω–∏–∫ –∫–∞–Ω–∞–ª—ñ–≤ ===
channel_ids = {
    "1.1": -1003113234171,
    "1.2": -1003145633887,
    "2.1": -1003147594459,
    "2.2": -1003138079087,
    "3.1": -1003128920788,
    "3.2": -1002967860214,
    "4.1": -1003033893922,
    "4.2": -1003009930050,
    "5.1": -1003170499896,
    "5.2": -1003096266337,
    "6.1": -1003169834725,
    "6.2": -1002988126895,
}


# === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞—Ç–∏ –≤ —Ç–µ–∫—Å—Ç—ñ ===
month_map = {
    "—Å—ñ—á–Ω—è": 1, "–ª—é—Ç–æ–≥–æ": 2, "–±–µ—Ä–µ–∑–Ω—è": 3, "–∫–≤—ñ—Ç–Ω—è": 4, "—Ç—Ä–∞–≤–Ω—è": 5, "—á–µ—Ä–≤–Ω—è": 6,
    "–ª–∏–ø–Ω—è": 7, "—Å–µ—Ä–ø–Ω—è": 8, "–≤–µ—Ä–µ—Å–Ω—è": 9, "–∂–æ–≤—Ç–Ω—è": 10, "–ª–∏—Å—Ç–æ–ø–∞–¥–∞": 11, "–≥—Ä—É–¥–Ω—è": 12
}

date_match = re.search(r"(\d{1,2})\s+(—Å—ñ—á–Ω—è|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥–∞|–≥—Ä—É–¥–Ω—è)", text, re.IGNORECASE)
target_date = None

if date_match:
    day = int(date_match.group(1))
    month_name = date_match.group(2).lower()
    month = month_map.get(month_name)
    now = datetime.now()  # –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
    year = now.year
    # —è–∫—â–æ –º—ñ—Å—è—Ü—å –≤–∂–µ –º–∏–Ω—É–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≥—Ä—É–¥–µ–Ω—å, –∞ –∑–∞—Ä–∞–∑ —Å—ñ—á–µ–Ω—å), —Ç–æ —Ä—ñ–∫ +1
    if month < now.month - 6:
        year += 1
    target_date = datetime(year, month, day)
    print(f"üìÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —É —Ç–µ–∫—Å—Ç—ñ: {target_date.strftime('%d.%m.%Y')}")

# === –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ —á–∏ –∑–∞–≤—Ç—Ä–∞ ===
today = datetime.now().date()
file_name = "schedule.json"
if target_date:
    if target_date.date() == today + timedelta(days=1):
        file_name = "schedule_tomorrow.json"
    elif target_date.date() != today:
        file_name = f"schedule_{target_date.strftime('%d%m')}.json"  # –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
print(f"üìÅ –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {file_name}")

# === –í–∏—Ç—è–≥—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —á–µ—Ä–≥ ===
result = {}
for line in text.splitlines():
    line = line.strip()
    if not re.match(r"^\d+\.\d+", line):
        continue
    match = re.match(r"^(\d+\.\d+)\s+(.+)$", line)
    if not match:
        continue
    key, periods_str = match.groups()
    periods = re.findall(r"(\d{1,2}:\d{2})\s*-\s*(\d{1,2}:\d{2})", periods_str)
    result[key] = {
        "_comment": f"–ß–µ—Ä–≥–∞ {key} ‚ö°",
        "channel_id": channel_ids.get(key, 0),
        "periods": periods
    }

# === –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É JSON ===
if result:
    Path(file_name).write_text(json.dumps(result, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"‚úÖ –§–∞–π–ª '{file_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ ({len(result)} —á–µ—Ä–≥).")
else:
    print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ —É —Ç–µ–∫—Å—Ç—ñ.")
