import asyncio
import json
import logging
import os
from datetime import datetime, timedelta, time
from pathlib import Path

import pytz
from dotenv import load_dotenv
from telegram import Bot
from telegram.constants import ParseMode

# ================== INIT ==================
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SCHEDULE_FILE = Path(os.getenv("SCHEDULE_FILE", "schedule.json"))
STATE_FILE = Path("bot_state.json")
TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Kyiv"))

bot = Bot(token=BOT_TOKEN)

# Track schedule file mtime & tasks
last_schedule_mtime: float | None = None
current_schedule: dict = {}
scheduled_tasks: list[asyncio.Task] = []

# ================== STATE ==================
def load_state():
    if STATE_FILE.exists():
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}


def save_state(state):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)


def cleanup_state(state, days: int = 10):
    cutoff = datetime.now() - timedelta(days=days)
    new_state = {}
    for key, value in state.items():
        try:
            dt = datetime.strptime(key.split("_")[-1], "%Y-%m-%d_%H:%M")
            if dt > cutoff:
                new_state[key] = value
        except Exception:
            new_state[key] = value
    if len(new_state) != len(state):
        save_state(new_state)
        logging.info("üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞–Ω—É (—Å—Ç–∞—Ä—à–µ %d –¥—ñ–±)", days)
    return new_state


bot_state = cleanup_state(load_state())

# ================== HELPERS ==================
def local_now() -> datetime:
    return datetime.now(TIMEZONE)


def today_timestr_to_datetime(timestr: str) -> datetime:
    now = local_now()
    hour, minute = map(int, timestr.split(":"))
    return TIMEZONE.localize(datetime.combine(now.date(), time(hour, minute)))


def load_schedule() -> tuple[dict, bool]:
    """Return (schedule, changed_flag)."""
    global last_schedule_mtime, current_schedule
    if not SCHEDULE_FILE.exists():
        logging.warning("‚ö†Ô∏è –§–∞–π–ª —Ä–æ–∑–∫–ª–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return {}, False

    mtime = SCHEDULE_FILE.stat().st_mtime
    changed = last_schedule_mtime is None or mtime != last_schedule_mtime
    if changed:
        last_schedule_mtime = mtime
        with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
            current_schedule = json.load(f)
        logging.info("üîÅ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ñ–∞–π–ª—É.")
    return current_schedule, changed


def schedule_task(coro: asyncio.coroutines):
    task = asyncio.create_task(coro)
    scheduled_tasks.append(task)
    return task


def cancel_all_scheduled_tasks():
    """Cancel pending scheduled tasks when the schedule changes."""
    alive = 0
    for t in scheduled_tasks:
        if not t.done():
            t.cancel()
            alive += 1
    scheduled_tasks.clear()
    if alive:
        logging.info("üõë –°–∫–∞—Å–æ–≤–∞–Ω–æ %d –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–¥–∞—á(—ñ) –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞.", alive)


# ================== SCHEDULER ==================
async def schedule_daily_tasks():
    schedule, _ = load_schedule()
    now = local_now()
    logging.info("üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –¥–æ–±—É...")

    for friendly_name, data in schedule.items():
        channel = data["channel_id"]
        periods = data["periods"]

        for i, (start_str, end_str) in enumerate(periods):
            start_dt = today_timestr_to_datetime(start_str)
            end_dt = today_timestr_to_datetime(end_str)

            # –ü–µ—Ä–µ—Ö—ñ–¥ —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á
            if end_dt <= start_dt:
                end_dt += timedelta(days=1)

            # –Ø–∫—â–æ –ø–µ—Ä—ñ–æ–¥ —É–∂–µ –º–∏–Ω—É–≤ –ø–æ–≤–Ω—ñ—Å—Ç—é ‚Äî –ø–µ—Ä–µ–Ω–µ—Å–µ–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –¥–æ–±—É
            if end_dt < now:
                start_dt += timedelta(days=1)
                end_dt += timedelta(days=1)

            # –í–ò–ú–ö–ù–ï–ù–ù–Ø
            schedule_task(
                maybe_post_message(
                    channel,
                    friendly_name,
                    (
                        f"‚ö° –ß–µ—Ä–≥–∞ {friendly_name}\n"
                        f"üî¥ –í–ò–ú–ö–ù–ï–ù–ù–Ø –∑ {start_dt.strftime('%H:%M')} –¥–æ {end_dt.strftime('%H:%M')}\n"
                        f"üí° –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –æ {end_dt.strftime('%H:%M')}"
                    ),
                    start_dt,
                    "off",
                )
            )

            # –£–í–Ü–ú–ö–ù–ï–ù–ù–Ø
            next_off = periods[i + 1][0] if i + 1 < len(periods) else None
            next_text = f"‚ö° –ß–µ—Ä–≥–∞ {friendly_name}\nüü¢ –°–í–Ü–¢–õ–û –£–í–Ü–ú–ö–ù–ï–ù–û –æ {end_dt.strftime('%H:%M')}"
            if next_off:
                next_text += f"\nüî¥ –ù–∞—Å—Ç—É–ø–Ω–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –æ {next_off}"

            schedule_task(maybe_post_message(channel, friendly_name, next_text, end_dt, "on"))

    logging.info("‚úÖ –ù–æ–≤—ñ –∑–∞–¥–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")


async def maybe_post_message(channel_id, friendly_name, text, send_time, event_type):
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ —á–∞—Å—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    delay = (send_time - local_now()).total_seconds()
    if delay > 0:
        try:
            await asyncio.sleep(delay)
        except asyncio.CancelledError:
            return

    key = f"{friendly_name}_{event_type}_{send_time.strftime('%Y-%m-%d_%H:%M')}"
    if bot_state.get(key):
        logging.info("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—å–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", key)
        return

    await post_message(channel_id, text)
    bot_state[key] = True
    save_state(bot_state)


async def post_message(channel_id, text):
    try:
        await bot.send_message(chat_id=channel_id, text=text, parse_mode=ParseMode.HTML)
        logging.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É %s", channel_id)
    except Exception as e:
        logging.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —É %s: %s", channel_id, e)


# ================== MAIN ==================
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")

    # –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    await schedule_daily_tasks()

    # –ù–∞—Å—Ç—É–ø–Ω–∞ –ø—ñ–≤–Ω—ñ—á –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    def next_midnight(dt: datetime) -> datetime:
        return (dt + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)

    rollover_at = next_midnight(local_now())

    while True:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ñ–∞–π–ª —Ä–æ–∑–∫–ª–∞–¥—É —â–æ—Ö–≤–∏–ª–∏–Ω–∏
        await asyncio.sleep(60)
        _, changed = load_schedule()
        now = local_now()

        # –ü–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É
        if changed:
            cancel_all_scheduled_tasks()
            await schedule_daily_tasks()
            # –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–≤–Ω—ñ—á, –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±–ª–∏–∑—å–∫–æ –¥–æ –æ–ø—ñ–≤–Ω–æ—á—ñ
            rollover_at = next_midnight(now)
            continue

        # –ü–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤—É –¥–æ–±—É
        if now >= rollover_at:
            cancel_all_scheduled_tasks()
            await schedule_daily_tasks()
            rollover_at = next_midnight(now)


if __name__ == "__main__":
    asyncio.run(main())
