import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime
import time
import random
import os
import telebot # –ù–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è telebot

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø TELEGRAM BOT API ---
TELEGRAM_BOT_TOKEN = "7854359194:AAFSEIpb5EWKwFEH7sc1U-NDJssWGD8J7IM"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞ –±–æ—Ç–∞ –∑ –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ö–ê–ù–ê–õ–Ü–í-–î–ñ–ï–†–ï–õ ---
SOURCE_CHANNELS_CONFIG = [
    {"username": "cherkaskaODA", "is_priority_source": False}, # –û—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª
    {"username": "UkraineAlarmSignal", "is_priority_source": True}, # –ö–∞–Ω–∞–ª –∑ —Ç—Ä–∏–≤–æ–≥–∞–º–∏
    {"username": "kpszsu", "is_priority_source": False}, # –ó–º—ñ–Ω–µ–Ω–æ –∑ war_monitor
    {"username": "cherkassy_int", "is_priority_source": False} # –ù–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª—ñ—Å—Ç–∏–∫–∏
]

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
FILTER_HASHTAGS = [
    "#–î—ñ–∞–ª–æ–≥_–≤–ª–∞–¥–∞_–±—ñ–∑–Ω–µ—Å",
    "#–ß–µ—Ä–∫–∞—â–∏–Ω–∞_—Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è_—Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ",
    "#–ë—ñ–∑–Ω–µ—Å_–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞_–ß–µ—Ä–∫–∞—â–∏–Ω–∞",
    "#–ß–µ—Ä–∫–∞—â–∏–Ω–∞_–º—ñ—Å—Ü–µ_—Å–∏–ª–∏",
    "#–ó—Ä–æ–±–ª–µ–Ω–æ_–≤_–£–∫—Ä–∞—ó–Ω—ñ"
]

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏-–≤–∏–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è *–±—É–¥—å-—è–∫–æ–≥–æ* –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –ø—Ä–æ–π—à–ª–∏ —ñ–Ω—à—ñ —Ñ—ñ–ª—å—Ç—Ä–∏)
GLOBAL_EXCLUSION_PHRASES = [
    "‚ùóÔ∏è‚ùóÔ∏è–ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê",
    "üü¢–í–Ü–î–ë–Ü–ô",
    "‚ùóÔ∏è‚ùóÔ∏è–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!"
]

# –§—Ä–∞–≥–º–µ–Ω—Ç–∏ —Ç–µ–∫—Å—Ç—É, —è–∫—ñ —Ä–æ–±–ª—è—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º" –¥–ª—è –∫–∞–Ω–∞–ª—É –æ–±–ª–∞—Å—Ç—ñ (–∑ cherkaaskaODA)
OBLAST_PRIORITY_PHRASES_CHERKASKAODA = [
    "‚ùóÔ∏è–ü—ñ–¥–≤–∏—â–µ–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞",
    "‚ùóÔ∏è", 
    "‚ùóÔ∏è–£–í–ê–ì–ê",
    "‚ùóÔ∏è–ü—ñ–¥–≤–∏—â–µ–Ω–∞ —Ä–∞–∫–µ—Ç–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞"
]

# –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É UkraineAlarmSignal
ALARM_SIGNAL_INCLUDE_PHRASE = "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª."
ALARM_SIGNAL_EXCLUDE_SYMBOLS = ["üö®", "üü¢"]
ALARM_SIGNAL_TEXT_TO_REPLACE = "(–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª.)" # –¶—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ –Ω–∞ "‚Äî"
ALARM_SIGNAL_TEXT_TO_REMOVE_PHRASE_1 = "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!"
ALARM_SIGNAL_TEXT_TO_REMOVE_PHRASE_2 = "–ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è"


# –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ UkraineAlarmSignal
# –í–∏–¥–∞–ª—è—î –≤—Å—ñ –µ–º–æ–¥–∑—ñ —Ç–∞ –≤–∫–∞–∑–∞–Ω—ñ —Ñ—Ä–∞–∑–∏
UKRAINE_ALARM_SIGNAL_CLEAN_REGEX = re.compile(
    r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\u200d\ufe0f\u2600-\u26FF\u2700-\u27BF]|\s*' + re.escape(ALARM_SIGNAL_TEXT_TO_REMOVE_PHRASE_1) + r'\s*|\s*' + re.escape(ALARM_SIGNAL_TEXT_TO_REMOVE_PHRASE_2) + r'\s*',
    flags=re.IGNORECASE
)

# –§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É kpszsu (–∑–∞–º—ñ—Å—Ç—å war_monitor)
MIG_MONITOR_INCLUDE_PHRASE = "–ó–ª—ñ—Ç –ú—ñ–ì-31–ö" # –ö–æ—Ä–µ–∫—Ç–Ω–∞ —Ñ—Ä–∞–∑–∞
MIG_MONITOR_ALERT_MESSAGE = "‚ö†Ô∏è üõ´ –ó–ª—ñ—Ç –ú—ñ–ì-31–ö –í–ü–° —Ä—Ñ ‚ö†Ô∏è"
KPSZSU_INCLUDE_MISSILE_PHRASE = "–†–∞–∫–µ—Ç–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞" # –ù–æ–≤–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è kpszsu


# –§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É cherkassy_int (–±–∞–ª—ñ—Å—Ç–∏–∫–∞)
BALLISTICS_MONITOR_INCLUDE_PHRASE = "–ó–∞–≥—Ä–æ–∑–∞ –±–∞–ª—ñ—Å—Ç–∏–∫–∏"
# –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–º–æ–¥–∑—ñ (–≤–∫–ª—é—á–∞—é—á–∏ üî™,‚û°Ô∏è,‚è∫Ô∏è), "!", "–£–≤–∞–≥–∞", —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
BALLISTICS_CLEAN_REGEX = re.compile(
    r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\u200d\ufe0f\u2600-\u26FF\u2700-\u27BFüî™‚û°Ô∏è‚è∫Ô∏è]|\!|–£–≤–∞–≥–∞|\n',
    flags=re.IGNORECASE
)


# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ö–ê–ù–ê–õ–Ü–í –î–õ–Ø –ü–£–ë–õ–Ü–ö–ê–¶–Ü–á ---
TARGET_CHANNELS_CONFIG = [
    {"name": "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "channel_id": "-1002893004632", "keywords": [], "is_priority_channel": True},
    {"name": "–ß–µ—Ä–∫–∞—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "channel_id": "-1002661759364", "keywords": ["–ß–µ—Ä–∫–∞—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", " –ß–µ—Ä–∫–∞—Å—å–∫–∏–π", "—á–µ—Ä–∫–∞—Å—å–∫–æ–≥–æ", "–ß–µ—Ä–∫–∞—Å–∏" ,"–°–º—ñ–ª–∞", "–°–º—ñ–ª—è–Ω", "–ì–æ—Ä–æ–¥–∏—â–µ", "–ö–∞–º'—è–Ω", "–ß–∏–≥–∏—Ä–∏–Ω", "–°–ª–æ–±–æ–¥–∞", "–°–ª–æ–±—ñ–¥—Å—å–∫", "–ë—ñ–ª–æ–∑—ñ—Ä", "–†—É—Å—å–∫–∞ –ü–æ–ª—è–Ω–∞", "–†—É—Å—å–∫–æ–ø–æ–ª—è–Ω—Å—å–∫", "–ú–æ—à–Ω", "–ë–∞–ª–∞–∫–ª–µ", "–ú–ª—ñ—ó–≤", "–õ–µ—Å—å–∫", "–Ø—Å–Ω–æ–∑—ñ—Ä", "–î—É–±—ñ—ó–≤", "–°–∞–≥—É–Ω—ñ–≤", "–•–∞—Ü—å–∫"], "is_priority_channel": False},
    {"name": "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "channel_id": "-1002727144917", "keywords": ["–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥", "–∑–≤–µ–Ω–∏–≥–æ—Ä–æ–¥", "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥–∫–∞", "–í–∞—Ç—É—Ç—ñ–Ω", "–ë–∞–≥–∞—á", "–®–ø–æ–ª", "–¢–∞–ª—å–Ω", "–õ–∏—Å—è–Ω", "–ö–∞—Ç–µ—Ä–∏–Ω–æ–ø—ñ–ª—å", "–í—ñ–ª—å—Ö–æ–≤–µ—Ü—å", "–Æ—Ä–∫—ñ–≤", "–®–µ–≤—á–µ–Ω–∫–æ–≤–µ", "–ú–æ—Ä–∏–Ω—Ü—ñ"], "is_priority_channel": False},
    {"name": "–ó–æ–ª–æ—Ç–æ–Ω—ñ—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "channel_id": "-1002599334350", "keywords": ["–ó–æ–ª–æ—Ç–æ–Ω—ñ—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "–∑–æ–ª–æ—Ç–æ–Ω—ñ—Å—å–∫", "–∑–æ–ª–æ—Ç–æ–Ω—ñ—Å—å–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ", "–ó–æ–ª–æ—Ç–æ–Ω–æ—à", "–ß–æ—Ä–Ω–æ–±–∞–π", "–î—Ä–∞–±—ñ–≤", "–ì–µ–ª—å–º—è–∑—ñ–≤", "–í–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫", "–ü—ñ—â–∞–Ω", "–®—Ä–∞–º–∫—ñ–≤", "–ë–ª–∞–≥–æ–¥–∞—Ç–Ω–µ", "–ë–æ–≥–æ–¥—É—Ö—ñ–≤–∫–∞", "–î—Ä–∞–±–æ–≤–µ-–ë–∞—Ä—è—Ç–∏–Ω—Å—å–∫–µ"], "is_priority_channel": False},
    {"name": "–£–º–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", "channel_id": "-1002872998914", "keywords": ["–£–º–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω", " —É–º–∞–Ω—Å—å–∫", "–£–º–∞–Ω—å", "–ñ–∞—à–∫—ñ–≤", "–•—Ä–∏—Å—Ç–∏–Ω—ñ–≤", "–ú–æ–Ω–∞—Å—Ç–∏—Ä–∏—â", "M–∞–Ω—å–∫—ñ–≤", "–í–µ—Ä—Ö–Ω—è—á–∫–∞", "–¶–∏–±—É–ª—ñ–≤"], "is_priority_channel": False},
]

# --- –§–ê–ô–õ–ò –Ü–°–¢–û–†–Ü–á –¢–ê –°–¢–ê–ù–£ –¢–†–ò–í–û–ì ---
# –¢–µ–ø–µ—Ä —ñ—Å—Ç–æ—Ä—ñ—è –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∞ –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏
HISTORY_FILE_PREFIX = "bot_history_" # –ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è —Ñ–∞–π–ª—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó (–Ω–∞–ø—Ä., bot_history_cherkaskaODA.json)
ALERT_STATE_FILE = "alert_state.json" 

# --- –ö–û–ù–°–¢–ê–ù–¢–ò –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á ---
MAX_HISTORY_IDS = 200 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ published_ids —Ç–∞ checked_ids

# --- –Ü–ù–¢–ï–†–í–ê–õ–ò –ó–ê–ü–£–°–ö–£ (—É —Å–µ–∫—É–Ω–¥–∞—Ö) ---
MIN_ALERT_INTERVAL_SEC = 60
MAX_ALERT_INTERVAL_SEC = 120 
MIN_NORMAL_INTERVAL_SEC = 300
MAX_NORMAL_INTERVAL_SEC = 600 
MIN_CYCLE_SLEEP_SEC = 50
MAX_CYCLE_SLEEP_SEC = 90


def load_json_file(filename, default_data):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ JSON —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î default_data, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î/–ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π.
    –¢–∞–∫–æ–∂ –∫–æ–Ω–≤–µ—Ä—Ç—É—î published_ids –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É (—Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤) —É –Ω–æ–≤–∏–π (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤).
    """
    data = default_data
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {filename}. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑ –¥–∞–Ω–∏–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
                data = default_data
    else:
        print(f"[INFO] –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑ –¥–∞–Ω–∏–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è published_ids, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏)
    if "published_ids" in data and isinstance(data["published_ids"], list):
        if data["published_ids"] and isinstance(data["published_ids"][0], str):
            print(f"[INFO] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è published_ids —É —Ñ–∞–π–ª—ñ {filename} –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É (—Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤) —É –Ω–æ–≤–∏–π (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤).")
            data["published_ids"] = [{"id": item, "text": "", "date": "", "time": ""} for item in data["published_ids"]]
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ä–æ–∑–º—ñ—Ä –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î MAX_HISTORY_IDS
            while len(data["published_ids"]) > MAX_HISTORY_IDS:
                data["published_ids"].pop(0)
    elif "published_ids" not in data:
        data["published_ids"] = [] # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ø–∏—Å–∫—É
    
    if "checked_ids" not in data:
        data["checked_ids"] = [] # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ø–∏—Å–∫—É

    return data


def save_json_file(filename, data):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ JSON —Ñ–∞–π–ª.
    """
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def get_alert_status():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î alert_state.json —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞, False —ñ–Ω–∞–∫—à–µ.
    """
    default_alert_state = {
        "had_connection_issue": False,
        "alerts": {
            "oblast": {"status": False, "start_time": None, "last_sent_image_filename": "0000.png"},
            "raions": {
                "152": {"status": False, "start_time": None},
                "150": {"status": False, "start_time": None},
                "153": {"status": False, "start_time": None},
                "151": {"status": False, "start_time": None}
            },
            "is_first_run_after_load": True
        }
    }
    alert_state = load_json_file(ALERT_STATE_FILE, default_alert_state)

    if alert_state.get('alerts', {}).get('oblast', {}).get('status', False):
        return True

    raions = alert_state.get('alerts', {}).get('raions', {})
    for raion_id in raions:
        if raions[raion_id].get('status', False):
            return True
            
    return False


def send_telegram_request(method, params=None, files=None):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∑–∞–ø–∏—Ç –¥–æ Telegram Bot API.
    –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î pyTelegramBotAPI (telebot) –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    if method == "sendMessage":
        chat_id = params.get('chat_id')
        text = params.get('text')
        parse_mode = params.get('parse_mode')
        disable_web_page_preview = params.get('disable_web_page_preview', False)
        disable_notification = params.get('disable_notification', False)

        try:
            # telebot.send_message –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç Message.
            # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –ª–æ–≥—ñ–∫–æ—é –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ 'ok': True
            sent_message = bot.send_message(
                str(chat_id), # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ chat_id –Ω–∞ —Ä—è–¥–æ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ —Ç–∏–ø—É
                text,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview,
                disable_notification=disable_notification
            )
            return {'ok': True, 'result': sent_message.json}
        except telebot.apihelper.ApiTelegramException as e:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ Telegram API (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ–¥—ñ–π—Å–Ω–∏–π chat_id, –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É)
            print(f"[ERROR] TeleBot API (sendMessage) to chat {chat_id}: {e}")
            return {'ok': False, 'description': str(e)}
        except Exception as e:
            # –ó–∞–≥–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –º–µ—Ä–µ–∂–µ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞)
            print(f"[ERROR] –ü—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –¥–æ TeleBot API (sendMessage) to chat {chat_id}: {e}")
            return None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None —É —Ä–∞–∑—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞–ª–∞ –ø—Ä–æ –∑–±—ñ–π
    else:
        # –î–ª—è —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ API, —è–∫—ñ –Ω–µ sendMessage, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ requests
        # (—è–∫—â–æ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —ó—Ö –¥–æ–¥–∞—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É)
        api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/{method}"
        try:
            if files:
                response = requests.post(api_url, data=params, files=files, timeout=10)
            else:
                response = requests.post(api_url, json=params, timeout=10)
                
            response.raise_for_status()
            result = response.json()
            if not result.get('ok'):
                print(f"[ERROR] Telegram API ({method}) to chat {params.get('chat_id', 'N/A')}: {result.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–∫–∞')}")
                return None
            return result
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] –ü—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –¥–æ Telegram API ({method}) to chat {params.get('chat_id', 'N/A')}: {e}")
            return None


def remove_non_printable_chars(text):
    """
    –í–∏–¥–∞–ª—è—î –∑ —Ç–µ–∫—Å—Ç—É –Ω–µ–¥—Ä—É–∫–æ–≤–∞–Ω—ñ ASCII-—Å–∏–º–≤–æ–ª–∏ —Ç–∞ –¥–µ—è–∫—ñ –ø–æ—à–∏—Ä–µ–Ω—ñ Unicode –∫–µ—Ä—É—é—á—ñ —Å–∏–º–≤–æ–ª–∏.
    """
    # –°–ø–∏—Å–æ–∫ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –∫–µ—Ä—É—é—á–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö "–ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö" —Å–∏–º–≤–æ–ª—ñ–≤
    # \x00-\x1F: ASCII Control characters
    # \x7F: DEL character
    # \x80-\x9F: C1 Control characters (often non-printable)
    # \u00ad: Soft Hyphen (often invisible)
    # \u200b-\u200f: Zero Width Space, Joiner, Non-Joiner, Left-to-Right, Right-to-Left Marks
    # \u202a-\u202e: Bidirectional control characters
    # \u2060-\u206f: Invisible mathematical operators, etc.
    # \ufeff: Byte Order Mark (BOM)
    # \ufff9-\uffff: Special (non-character)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–µ—Ä—É—é—á—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –ø—Ä–æ–±—ñ–ª—É (0x20)
    # —ñ –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –¥—Ä—É–∫–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏ Unicode.
    return re.sub(r'[\x00-\x1F\x7F-\x9F\u00AD\u2000-\u200F\u2028-\u202F\u205F\u2060-\u206F\u3000\uFEFF]', '', text)

def add_id_to_history_list(history_list, new_id, max_size):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π ID –¥–æ —Å–ø–∏—Å–∫—É —ñ—Å—Ç–æ—Ä—ñ—ó, –æ–±–º–µ–∂—É—é—á–∏ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä.
    –í–∏–¥–∞–ª—è—î –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏, —è–∫—â–æ —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î max_size.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ª–∏—à–µ ID (—Ä—è–¥–∫–∏).
    """
    if new_id not in history_list:
        history_list.append(new_id)
    # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä, –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    while len(history_list) > max_size:
        history_list.pop(0) # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –µ–ª–µ–º–µ–Ω—Ç (–ø–µ—Ä—à–∏–π —É —Å–ø–∏—Å–∫—É)

def add_published_entry_to_history(history_list, new_entry_dict, max_size):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø–æ—Å—Ç—É –¥–æ —Å–ø–∏—Å–∫—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –æ–±–º–µ–∂—É—é—á–∏ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä.
    –í–∏–¥–∞–ª—è—î –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏, —è–∫—â–æ —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î max_size.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å —Å–ª–æ–≤–Ω–∏–∫–∏.
    """
    new_id = new_entry_dict.get('id')
    if not new_id:
        print("[WARN] –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –±–µ–∑ ID. –ó–∞–ø–∏—Å –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ ID –≤–∂–µ —ñ—Å–Ω—É—î —É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    if not any(entry.get('id') == new_id for entry in history_list):
        history_list.append(new_entry_dict)
    
    # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä, –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    while len(history_list) > max_size:
        history_list.pop(0) # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –µ–ª–µ–º–µ–Ω—Ç (–ø–µ—Ä—à–∏–π —É —Å–ø–∏—Å–∫—É)


def parse_source_channel_for_latest_content(source_username, history):
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫—É –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º —ñ –Ω–µ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ/–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.
    """
    url = f"https://t.me/s/{source_username}"
    print(f"[INFO] –ü–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {source_username}: {url}")

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {url}: {e}")
        return None

    soup = BeautifulSoup(response.text, 'html.parser')
    channel_history = soup.find('section', class_='tgme_channel_history')

    if not channel_history:
        print(f"[ERROR] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∫–∞–Ω–∞–ª—É {source_username} –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")
        return None

    message_elements = channel_history.find_all('div', class_='tgme_widget_message')

    if not message_elements:
        print(f"[INFO] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {source_username}.")
        return None

    for latest_message_div in reversed(message_elements):
        data_post_attr = latest_message_div.get('data-post')
        if not data_post_attr:
            # print("[WARN] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—É 'data-post'. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            continue

        original_message_id_str = data_post_attr.split('/')[-1]
        unique_post_id = f"{source_username}_{original_message_id_str}" # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        
        # –û–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è published_ids (—Ç–µ–ø–µ—Ä —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤)
        if any(entry.get('id') == unique_post_id for entry in history["published_ids"]):
            print(f"[DEBUG] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{unique_post_id} –∑ {source_username} –≤–∂–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            continue
        
        if unique_post_id in history["checked_ids"]: # checked_ids –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º —Ä—è–¥–∫—ñ–≤
            print(f"[DEBUG] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{unique_post_id} –∑ {source_username} –≤–∂–µ –±—É–ª–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            continue

        message_info = {
            'original_message_id': original_message_id_str,
            'source_username': source_username, # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ
            'unique_post_id': unique_post_id
        }

        date_link_element = latest_message_div.find('a', class_='tgme_widget_message_date')
        if date_link_element:
            message_info['original_link'] = date_link_element.get('href')
            time_element = date_link_element.find('time', class_='time')
            if time_element:
                iso_datetime_str = time_element.get('datetime')
                message_info['original_datetime_iso'] = iso_datetime_str
                if iso_datetime_str:
                    try:
                        dt_object = datetime.fromisoformat(iso_datetime_str.replace('Z', '+00:00'))
                        message_info['original_datetime_parsed'] = dt_object
                    except ValueError:
                        message_info['original_datetime_parsed'] = "–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏"
                else:
                    message_info['original_datetime_parsed'] = "–ê—Ç—Ä–∏–±—É—Ç datetime –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
            else:
                message_info['original_link'] = "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                message_info['original_datetime_parsed'] = "–î–∞—Ç–∞/—á–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        author_element = latest_message_div.find('div', class_='tgme_widget_message_author')
        if author_element:
            owner_name_element = author_element.find('span', dir="auto")
            if owner_name_element:
                message_info['author'] = owner_name_element.get_text(strip=True)
        else:
            message_info['author'] = "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä"

        forwarded_from_element = latest_message_div.find('div', class_='tgme_widget_message_forwarded_from')
        if forwarded_from_element:
            forwarded_name_element = forwarded_from_element.find('span', dir="auto")
            if forwarded_name_element:
                message_info['forwarded_from'] = forwarded_name_element.get_text(strip=True)
        else:
            message_info['forwarded_from'] = None

        text_element = latest_message_div.find('div', class_='tgme_widget_message_text')
        if text_element:
            cleaned_text_html = str(text_element)
            cleaned_text_html = cleaned_text_html.replace('<div class="tgme_widget_message_text js-message_text" dir="auto">', '')
            cleaned_text_html = cleaned_text_html.replace('<span style="display: inline-block; width: 97px;"></span>', '')
            cleaned_text_html = cleaned_text_html.replace('</div>', '')
            
            message_info['text_html'] = cleaned_text_html.strip()
            message_info['text_plain'] = text_element.get_text(separator=' ', strip=True)
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–¥—Ä—É–∫–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
            message_info['text_plain'] = remove_non_printable_chars(message_info['text_plain'])


            links_in_text = [a['href'] for a in text_element.find_all('a', href=True)]
            message_info['links_in_text'] = links_in_text
        else:
            message_info['text_html'] = None
            message_info['text_plain'] = '' # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–∞–º—ñ—Å—Ç—å None
            message_info['links_in_text'] = []

        message_info['has_media'] = False
        message_info['media_type'] = None
        message_info['media_url'] = None

        video_tag = latest_message_div.find('video', class_='tgme_widget_message_video')
        if video_tag and video_tag.get('src'):
            message_info['has_media'] = True
            message_info['media_type'] = 'video'
            message_info['media_url'] = video_tag.get('src')
        
        if not message_info['has_media']:
            grouped_photo_wraps = latest_message_div.find_all('a', class_='tgme_widget_message_photo_wrap')
            if grouped_photo_wraps:
                message_info['has_media'] = True
                message_info['media_type'] = 'photos'
                photo_urls = []
                for photo_wrap in grouped_photo_wraps:
                    style_attr = photo_wrap.get('style')
                    if style_attr and 'background-image' in style_attr:
                        start = style_attr.find("url('") + len("url('")
                        end = style_attr.find("')")
                        photo_urls.append(style_attr[start:end])
                if photo_urls:
                    message_info['media_url'] = photo_urls
                
            elif latest_message_div.find('a', class_='tgme_widget_message_photo_wrap'):
                message_info['has_media'] = True
                message_info['media_type'] = 'photo'
                single_photo_wrap = latest_message_div.find('a', class_='tgme_widget_message_photo_wrap')
                style_attr = single_photo_wrap.get('style')
                if style_attr and 'background-image' in style_attr:
                    start = style_attr.find("url('") + len("url('")
                    end = style_attr.find("')")
                    message_info['media_url'] = style_attr[start:end]

        # --- –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –§–Ü–õ–¨–¢–†–Ü–í –î–õ–Ø –î–ñ–ï–†–ï–õ–ê ---
        if should_process_message_from_source(message_info):
            print(f"[SUCCESS] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{message_info['unique_post_id']} –∑ {source_username} –ø—Ä–æ–π—à–ª–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–∂–µ—Ä–µ–ª–∞.")
            return message_info
        else:
            # –û–Ω–æ–≤–ª—é—î–º–æ checked_ids –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º
            add_id_to_history_list(history["checked_ids"], unique_post_id, MAX_HISTORY_IDS)
            save_json_file(f"{HISTORY_FILE_PREFIX}{source_username}.json", history)
    
    print(f"[INFO] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {source_username}, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫—Ä–∏—Ç–µ—Ä—ñ—è–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
    return None


def format_duration(seconds):
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —É —Ä—è–¥–æ–∫ "–î–Ω—ñ:–ì–æ–¥–∏–Ω–∏:–•–≤–∏–ª–∏–Ω–∏:–°–µ–∫—É–Ω–¥–∏".
    """
    if seconds is None or not isinstance(seconds, (int, float)):
        return "–ù/–î"
    
    seconds = int(seconds)
    
    days = seconds // (24 * 3600)
    seconds %= (24 * 3600)
    
    hours = seconds // 3600
    seconds %= 3600
    
    minutes = seconds // 60
    final_seconds = seconds % 60 # Remaining seconds after minutes

    time_str = f"{hours:02d}:{minutes:02d}:{final_seconds:02d}"
    
    if days > 0:
        return f"{days}–¥ {time_str}"
    else:
        return time_str


def should_process_message_from_source(content):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –¥–ª—è –æ–±—Ä–æ–±–∫–∏,
    –∞–±–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º –¥–ª—è –¥–∂–µ—Ä–µ–ª–∞.
    """
    message_id = content.get('unique_post_id', 'N/A')
    text_to_check = content.get('text_plain', '') # –¢–µ–ø–µ—Ä –∑–∞–≤–∂–¥–∏ –±—É–¥–µ —Ä—è–¥–æ–∫ –∑–∞–≤–¥—è–∫–∏ fix –≤ parse_source_channel_for_latest_content
    source_username = content.get('source_username')

    # –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª
    if content.get('has_media'):
        print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –º—ñ—Å—Ç–∏—Ç—å –º–µ–¥—ñ–∞ ({content.get('media_type')}).")
        return False
    if content.get('forwarded_from'):
        print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤—ñ–¥ '{content['forwarded_from']}'.")
        return False
    for hashtag in FILTER_HASHTAGS:
        if hashtag.lower() in text_to_check.lower():
            print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π —Ö–µ—à—Ç–µ–≥ '{hashtag}'.")
            return False
    
    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω—å –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –ª–∏—à–µ –¥–æ 'cherkaskaODA'
    if source_username == "cherkaskaODA":
        allowed_link_prefix_oda = f"https://t.me/{source_username}"
        for link in content.get('links_in_text', []):
            # –†–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω—ñ–≤ –≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è—Ö
            if not (link.lower().startswith(allowed_link_prefix_oda.lower()) or \
                    (link.lower().startswith('https://t.me/') and source_username.lower() in link.lower()) or \
                    (link.lower().startswith('http://t.me/') and source_username.lower() in link.lower())):
                print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è '{link}'.")
                return False
    
    for phrase in GLOBAL_EXCLUSION_PHRASES:
        if phrase.lower() in text_to_check.lower():
            print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –º—ñ—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É —Ñ—Ä–∞–∑—É-–≤–∏–∫–ª—é—á–µ–Ω–Ω—è '{phrase}'.")
            return False

    # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è UkraineAlarmSignal
    if source_username == "UkraineAlarmSignal":
        if ALARM_SIGNAL_INCLUDE_PHRASE.lower() not in text_to_check.lower():
            print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑ {source_username}: –Ω–µ –º—ñ—Å—Ç–∏—Ç—å '{ALARM_SIGNAL_INCLUDE_PHRASE}'.")
            return False
        for symbol in ALARM_SIGNAL_EXCLUDE_SYMBOLS:
            if symbol in text_to_check: # –°–∏–º–≤–æ–ª–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–æ–∑–∞–ª–µ–∂–Ω—ñ
                print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑ {source_username}: –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π —Å–∏–º–≤–æ–ª '{symbol}'.")
                return False
        return True

    # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è kpszsu (–∑–∞–º—ñ—Å—Ç—å war_monitor)
    elif source_username == "kpszsu":
        # –¶–µ–π –∫–∞–Ω–∞–ª –¥–æ–∑–≤–æ–ª—è—î –≤—Å—ñ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —â–æ –ø—Ä–æ–π—à–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏,
        # –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏ –≤ process_and_publish_message_to_channels.
        # –¢–∞–º –±—É–¥–µ –≤–∏—Ä—ñ—à–µ–Ω–æ, —á–∏ —î —Ü–µ –ú—ñ–ì-31–ö, —á–∏ –≤–æ–Ω–æ –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ä–∞–π–æ–Ω—ñ–≤.
        return True

    # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è cherkassy_int (–ë–∞–ª—ñ—Å—Ç–∏–∫–∞)
    elif source_username == "cherkassy_int":
        if BALLISTICS_MONITOR_INCLUDE_PHRASE.lower() in text_to_check.lower():
            print(f"  [FILTER] ID:{message_id} - –ó–Ω–∞–π–¥–µ–Ω–æ '{BALLISTICS_MONITOR_INCLUDE_PHRASE}' –∑ {source_username}. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
            return True
        else:
            print(f"  [FILTER] ID:{message_id} - –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑ {source_username}: –Ω–µ –º—ñ—Å—Ç–∏—Ç—å '{BALLISTICS_MONITOR_INCLUDE_PHRASE}'.")
            return False

    # –î–ª—è —ñ–Ω—à–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ (–Ω–∞—Ä–∞–∑—ñ —Ç—ñ–ª—å–∫–∏ cherkaskaODA)
    return True


def post_content_to_telegram(content, history, target_channel_id_to_send, remove_text=None, custom_message_text=None):
    """
    –ü—É–±–ª—ñ–∫—É—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —è–∫ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª
    —Ç–∞ –æ–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é. –ú–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–µ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
    –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ.
    """
    if not content:
        print("[ERROR] –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
        return False

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ custom_message_text, —è–∫—â–æ –≤—ñ–Ω –Ω–∞–¥–∞–Ω–∏–π
    if custom_message_text:
        final_text_to_send = custom_message_text
        parse_mode = None # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–∑–≤–∏—á–∞–π plain text
    else:
        # –î–ª—è UkraineAlarmSignal –ø—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ plain text —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
        if content.get('source_username') == "UkraineAlarmSignal":
            final_text_to_send = content.get('text_plain', '')
            
            # 1. –ó–∞–º—ñ–Ω—é—î–º–æ "(–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª.)" –Ω–∞ "‚Äî" (—Ä–µ–≥—ñ—Å—Ç—Ä–æ—á—É—Ç–ª–∏–≤–∞ –∑–∞–º—ñ–Ω–∞)
            final_text_to_send = final_text_to_send.replace(ALARM_SIGNAL_TEXT_TO_REPLACE, '‚Äî')
            
            # 2. –ó–∞–º—ñ–Ω—é—î–º–æ "üõ∏" –Ω–∞ "üõ©" (—Ä–µ–≥—ñ—Å—Ç—Ä–æ—á—É—Ç–ª–∏–≤–∞ –∑–∞–º—ñ–Ω–∞, –µ–º–æ–¥–∑—ñ)
            final_text_to_send = final_text_to_send.replace("üõ∏", "üõ©")

            # 3. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –µ–º–æ–¥–∑—ñ —Ç–∞ —Ñ—Ä–∞–∑–∏ "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!" —Ç–∞ "–ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è"
            # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ UKRAINE_ALARM_SIGNAL_CLEAN_REGEX –≤–∂–µ –º–∞—î re.IGNORECASE –¥–ª—è —Ä–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—Ä–∞–∑
            final_text_to_send = UKRAINE_ALARM_SIGNAL_CLEAN_REGEX.sub('', final_text_to_send).strip()
            
            # 4. –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤
            final_text_to_send = re.sub(r'\s+', ' ', final_text_to_send).strip()
            final_text_to_send = re.sub(r'\n{2,}', '\n', final_text_to_send).strip()
            parse_mode = None # –ó–∞–≤–∂–¥–∏ plain text –¥–ª—è —Ü—å–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞

        else: # –î–ª—è —ñ–Ω—à–∏—Ö –¥–∂–µ—Ä–µ–ª –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ª–æ–≥—ñ–∫—É HTML/plain text
            message_text = content.get('text_plain', '')
            original_html = content.get('text_html', '')
            parse_mode = "HTML" # –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–¥—Ä—É–∫–æ–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ plain —Ç–∞ html —Ç–µ–∫—Å—Ç—É
            # –ó–∞—É–≤–∞–∂–µ–Ω–Ω—è: text_plain –≤–∂–µ –æ—á–∏—â–µ–Ω–∏–π –≤—ñ–¥ –Ω–µ–¥—Ä—É–∫–æ–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –≤ parse_source_channel_for_latest_content
            # original_html —Ç–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—á–∏—Å—Ç–∏—Ç–∏
            original_html = remove_non_printable_chars(original_html)

            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–µ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (–∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î custom_message_text)
            if remove_text:
                # –†–µ–≥—ñ—Å—Ç—Ä–æ—á—É—Ç–ª–∏–≤–∞ –∑–∞–º—ñ–Ω–∞ –¥–ª—è remove_text
                message_text = message_text.replace(remove_text, '').strip()
                original_html = original_html.replace(remove_text, '').strip()
                original_html = re.sub(r'(\s*<br\s*/?>\s*){2,}', '<br>', original_html)
                original_html = re.sub(r'\s{2,}', ' ', original_html)

            final_text_to_send = original_html if original_html else message_text
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTML-–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ (–±–∞–∑–æ–≤–∞)
            # –Ø–∫—â–æ –ø—ñ—Å–ª—è –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π —Ç–µ–∫—Å—Ç –Ω–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ HTML (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–±—Ä—ñ–∑–∞–Ω–æ —Ç–µ–≥–∏),
            # –∞–±–æ —è–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π HTML –±—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—å –Ω–∞ plain text.
            if parse_mode == "HTML" and (not final_text_to_send.strip().startswith('<') or not final_text_to_send.strip().endswith('>')):
                if len(final_text_to_send) != len(original_html) or not original_html.strip():
                    parse_mode = None
    
    if not final_text_to_send:
        print(f"[WARN] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{content.get('unique_post_id', 'N/A')} —Å—Ç–∞–ª–æ –ø–æ—Ä–æ–∂–Ω—ñ–º –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏. –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ.")
        return False

    MAX_MESSAGE_LENGTH = 4096
    if len(final_text_to_send) > MAX_MESSAGE_LENGTH:
        print(f"[WARN] –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{content.get('unique_post_id', 'N/A')} –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –¥–ª—è Telegram, –±—É–¥–µ –æ–±—Ä—ñ–∑–∞–Ω–∏–π.")
        final_text_to_send = final_text_to_send[:MAX_MESSAGE_LENGTH - 50] + "...\n(–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –æ–±—Ä—ñ–∑–∞–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–ª–∏–∫–∏–π —Ä–æ–∑–º—ñ—Ä)"
    
    # !!! –î–û–î–ê–ù–û –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò !!!
    print(f"[DEBUG_SEND] Attempting to send message {content.get('unique_post_id', 'N/A')} to channel {target_channel_id_to_send}")
    print(f"[DEBUG_SEND] Final text (first 200 chars): '{final_text_to_send[:200]}'")
    print(f"[DEBUG_SEND] Text length: {len(final_text_to_send)}, Parse mode: {parse_mode}")
    # !!! –ö–Ü–ù–ï–¶–¨ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò !!!

    result = send_telegram_request("sendMessage", {
        "chat_id": target_channel_id_to_send,
        "text": final_text_to_send,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True,
        "disable_notification": True # –í—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    })

    if result and result.get('ok'): # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ result.get('ok') —è–≤–Ω–æ
        unique_id = content.get('unique_post_id')
        history_for_source = load_json_file(f"{HISTORY_FILE_PREFIX}{content['source_username']}.json", {"published_ids": [], "checked_ids": []})
        
        if unique_id:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ published_ids
            published_date = ""
            published_time = ""
            original_dt_iso = content.get('original_datetime_iso')
            if original_dt_iso:
                try:
                    dt_obj = datetime.fromisoformat(original_dt_iso.replace('Z', '+00:00'))
                    published_date = dt_obj.strftime("%Y-%m-%d")
                    published_time = dt_obj.strftime("%H:%M:%S")
                except ValueError:
                    pass # –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏/—á–∞—Å—É –∑–∞–ª–∏—à–∞—î–º–æ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏

            new_published_entry = {
                "id": unique_id,
                "text": final_text_to_send, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π
                "date": published_date,
                "time": published_time
            }

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            add_published_entry_to_history(history_for_source["published_ids"], new_published_entry, MAX_HISTORY_IDS)
            save_json_file(f"{HISTORY_FILE_PREFIX}{content['source_username']}.json", history_for_source)
            print(f"[SUCCESS] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID:{unique_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó published_ids –¥–ª—è {content['source_username']}.")
        else:
            print(f"[WARN] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ, –∞–ª–µ ID {unique_id} –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó published_ids –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É–≤–∞–ª–æ –¥–ª—è {content['source_username']}.")
        return True
    else:
        # –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ result.get('ok') False
        error_description = result.get('description', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞') if result else "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API"
        print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {content.get('unique_post_id', 'N/A')} –≤ –∫–∞–Ω–∞–ª {target_channel_id_to_send}. –ü—Ä–∏—á–∏–Ω–∞: {error_description}")
        return False


def process_and_publish_message_to_channels(message_content, history_data_map):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ø—Ä–æ–π—à–ª–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏,
    —ñ –ø—É–±–ª—ñ–∫—É—î –π–æ–≥–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–∞–Ω–∞–ª–∏ –∑–≥—ñ–¥–Ω–æ –∑ —ó—Ö–Ω—ñ–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.
    """
    unique_id = message_content.get('unique_post_id')
    text_to_check = message_content.get('text_plain', '')
    source_username = message_content.get('source_username')
    
    published_to_any_channel = False
    
    history_for_source = history_data_map[source_username]

    oblast_channel_config = next((c for c in TARGET_CHANNELS_CONFIG if c.get('is_priority_channel')), None)

    # --- –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è UkraineAlarmSignal ---
    if source_username == "UkraineAlarmSignal":
        if oblast_channel_config:
            # –í–∏–¥–∞–ª—è—î–º–æ "(–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª.)" –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ UkraineAlarmSignal. –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ '{oblast_channel_config['name']}'.")
            # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: remove_text —Ç—É—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ post_content_to_telegram
            if post_content_to_telegram(message_content, history_for_source, oblast_channel_config['channel_id']):
                published_to_any_channel = True
        else:
            print(f"[WARN] –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ UkraineAlarmSignal –ø—ñ–¥—Ö–æ–¥–∏—Ç—å. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è.")

        # –î–∞–ª—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ä–∞–π–æ–Ω–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        # (—è–∫—â–æ –≤–æ–Ω–æ –º—ñ—Å—Ç–∏—Ç—å —ó—Ö–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞)
        print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ UkraineAlarmSignal. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–∞–π–æ–Ω–Ω–∏–º –∫–∞–Ω–∞–ª–∞–º.")
        for channel_config in TARGET_CHANNELS_CONFIG:
            if channel_config.get('is_priority_channel'):
                continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±–ª–∞—Å–Ω–∏–π –∫–∞–Ω–∞–ª, –π–æ–≥–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ

            channel_name = channel_config['name']
            channel_id = channel_config['channel_id']
            channel_keywords = channel_config.get('keywords', [])

            is_suitable_for_district = False
            for keyword in channel_keywords:
                # –†–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ä–∞–π–æ–Ω—ñ–≤
                if keyword.lower() in text_to_check.lower():
                    is_suitable_for_district = True
                    break
            
            if is_suitable_for_district:
                print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è '{channel_name}'. –ü—É–±–ª—ñ–∫—É—î–º–æ.")
                # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: remove_text —Ç—É—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ post_content_to_telegram
                if post_content_to_telegram(message_content, history_for_source, channel_id):
                    published_to_any_channel = True
        
    # --- –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è kpszsu (–æ–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞) ---
    elif source_username == "kpszsu":
        published_to_any_district_channel_from_kpszsu = False # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ, —á–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –±—É–¥—å-—è–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª –∑ kpszsu
        
        # 1. –°–ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ú—ñ–ì-31–ö (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if MIG_MONITOR_INCLUDE_PHRASE.lower() in text_to_check.lower():
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –º—ñ—Å—Ç–∏—Ç—å '{MIG_MONITOR_INCLUDE_PHRASE}'. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É –≤—Å—ñ –∫–∞–Ω–∞–ª–∏.")
            for channel_config in TARGET_CHANNELS_CONFIG:
                channel_name = channel_config['name']
                channel_id = channel_config['channel_id']
                print(f"[PUBLISH_LOGIC] –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ú—ñ–ì-31–ö –≤ –∫–∞–Ω–∞–ª '{channel_name}' ({channel_id}).")
                if post_content_to_telegram(message_content, history_for_source, channel_id, custom_message_text=MIG_MONITOR_ALERT_MESSAGE):
                    published_to_any_channel = True
            # –Ø–∫—â–æ —Ü–µ –ú—ñ–ì-31–ö, —Ç–æ –ø–æ–¥–∞–ª—å—à–∞ —Ä–∞–π–æ–Ω–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞.
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–≤–∞–∂–∞—î—Ç—å—Å—è –æ–±—Ä–æ–±–ª–µ–Ω–∏–º, —ñ –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó.
            return

        # 2. –Ø–∫—â–æ —Ü–µ –Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ú—ñ–ì-31–ö, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–∞–π–æ–Ω–Ω–∏–º –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º
        print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –Ω–µ —î –ú—ñ–ì-331–ö. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–∞–π–æ–Ω–Ω–∏–º –∫–∞–Ω–∞–ª–∞–º.")
        
        channels_to_publish_to_kpszsu_districts = [] # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–∞–π–æ–Ω–Ω—ñ –∫–∞–Ω–∞–ª–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º
        for channel_config in TARGET_CHANNELS_CONFIG:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ, —ó—ó –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
            if channel_config.get('is_priority_channel'): 
                continue 

            channel_name = channel_config['name']
            channel_id = channel_config['channel_id']
            channel_keywords = channel_config.get('keywords', [])

            is_suitable_for_district = False
            for keyword in channel_keywords:
                if keyword.lower() in text_to_check.lower():
                    is_suitable_for_district = True
                    break
            
            if is_suitable_for_district:
                channels_to_publish_to_kpszsu_districts.append(channel_config)
                print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è '{channel_name}'. –î–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")

        # 3. –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ —Ä–∞–π–æ–Ω–Ω—ñ –∫–∞–Ω–∞–ª–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º
        for channel_config in channels_to_publish_to_kpszsu_districts:
            channel_name = channel_config['name']
            channel_id = channel_config['channel_id']
            print(f"[PUBLISH_LOGIC] –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –≤ —Ä–∞–π–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª '{channel_name}' ({channel_id}).")
            if post_content_to_telegram(message_content, history_for_source, channel_id):
                published_to_any_channel = True # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä –±—É–¥—å-—è–∫–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                published_to_any_district_channel_from_kpszsu = True # –ü—Ä–∞–ø–æ—Ä, —â–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–∞–π–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª

        # 4. –û–±—Ä–æ–±–ª—è—î–º–æ "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" –∫–∞–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –≤ —Ä–∞–π–æ–Ω–Ω—ñ –∫–∞–Ω–∞–ª–∏
        if oblast_channel_config and published_to_any_district_channel_from_kpszsu:
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ '{oblast_channel_config['name']}' (–æ—Å–∫—ñ–ª—å–∫–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ —Ä–∞–π–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª).")
            if post_content_to_telegram(message_content, history_for_source, oblast_channel_config['channel_id']):
                published_to_any_channel = True
        elif oblast_channel_config and not published_to_any_district_channel_from_kpszsu:
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –ù–ï –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ '{oblast_channel_config['name']}' (–Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∂–æ–¥–µ–Ω —Ä–∞–π–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª).")

        # 5. –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ kpszsu –Ω–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∂–æ–¥–µ–Ω –∫–∞–Ω–∞–ª (–Ω—ñ –ú—ñ–ì, –Ω—ñ —Ä–∞–π–æ–Ω), –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ checked_ids.
        # –¶–µ–π –±–ª–æ–∫ —Å–ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ published_to_any_channel –≤—Å–µ —â–µ False.
        if not published_to_any_channel:
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ kpszsu –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ –¥–ª—è –∂–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –ø—ñ—Å–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
            add_id_to_history_list(history_for_source["checked_ids"], unique_id, MAX_HISTORY_IDS)
            save_json_file(f"{HISTORY_FILE_PREFIX}{source_username}.json", history_for_source)
            print(f"[INFO] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –¥–æ–¥–∞–Ω–æ –¥–æ checked_ids –¥–ª—è {source_username}.")


    # --- –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è cherkassy_int (–ë–∞–ª—ñ—Å—Ç–∏–∫–∞) ---
    elif source_username == "cherkassy_int":
        # –£–º–æ–≤–∞ –≤–∂–µ —Ä–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∞ –≤ should_process_message_from_source
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–æ–π—à–ª–æ —Ñ—ñ–ª—å—Ç—Ä should_process_message_from_source (—Ç–æ–±—Ç–æ –º—ñ—Å—Ç–∏—Ç—å "–ó–∞–≥—Ä–æ–∑–∞ –±–∞–ª—ñ—Å—Ç–∏–∫–∏")
        # —Ñ–æ—Ä–º—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —É –í–°–Ü –∫–∞–Ω–∞–ª–∏.
        # –í–∞–∂–ª–∏–≤–æ: text_to_check –≤–∂–µ –ø—Ä–æ–π—à–æ–≤ remove_non_printable_chars –Ω–∞ –µ—Ç–∞–ø—ñ should_process_message_from_source
        cleaned_ballistics_text = BALLISTICS_CLEAN_REGEX.sub('', text_to_check).strip()
        final_ballistics_alert_message = "üöÄ " + cleaned_ballistics_text

        print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ cherkassy_int –º—ñ—Å—Ç–∏—Ç—å '{BALLISTICS_MONITOR_INCLUDE_PHRASE}'. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±–∞–ª—ñ—Å—Ç–∏–∫—É —É –≤—Å—ñ –∫–∞–Ω–∞–ª–∏: '{final_ballistics_alert_message}'.")
        for channel_config in TARGET_CHANNELS_CONFIG:
            channel_name = channel_config['name']
            channel_id = channel_config['channel_id']
            print(f"[PUBLISH_LOGIC] –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±–∞–ª—ñ—Å—Ç–∏–∫—É –≤ –∫–∞–Ω–∞–ª '{channel_name}' ({channel_id}).")
            if post_content_to_telegram(message_content, history_for_source, channel_id, custom_message_text=final_ballistics_alert_message):
                published_to_any_channel = True

    # --- –û–±—Ä–æ–±–∫–∞ –¥–ª—è cherkaskaODA (—ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞) ---
    elif source_username == "cherkaskaODA":
        is_priority_message_from_oda = False
        for phrase in OBLAST_PRIORITY_PHRASES_CHERKASKAODA:
            # –†–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö —Ñ—Ä–∞–∑ ODA
            if phrase.lower() in text_to_check.lower():
                is_priority_message_from_oda = True
                break
                
        if oblast_channel_config and is_priority_message_from_oda:
            print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ cherkaskaODA –º—ñ—Å—Ç–∏—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—É —Ñ—Ä–∞–∑—É. –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ '{oblast_channel_config['name']}'.")
            if post_content_to_telegram(message_content, history_for_source, oblast_channel_config['channel_id']):
                published_to_any_channel = True
        elif is_priority_message_from_oda:
            print(f"[WARN] –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ cherkaskaODA –º—ñ—Å—Ç–∏—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—É —Ñ—Ä–∞–∑—É. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è.")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ä–∞–π–æ–Ω–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è cherkaskaODA (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—ñ)
        for channel_config in TARGET_CHANNELS_CONFIG:
            if channel_config.get('is_priority_channel'):
                continue

            channel_name = channel_config['name']
            channel_id = channel_config['channel_id']
            channel_keywords = channel_config.get('keywords', [])

            is_suitable_for_district = False
            for keyword in channel_keywords:
                # –†–µ–≥—ñ—Å—Ç—Ä–æ–Ω–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ä–∞–π–æ–Ω—ñ–≤
                if keyword.lower() in text_to_check.lower():
                    is_suitable_for_district = True
                    break
            
            if is_suitable_for_district:
                print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –∑ cherkaskaODA –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è '{channel_name}'. –ü—É–±–ª—ñ–∫—É—î–º–æ.")
                if post_content_to_telegram(message_content, history_for_source, channel_id):
                    published_to_any_channel = True
    else:
        print(f"[WARN] –ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ '{source_username}' –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É.")

    # –¶–µ–π –±–ª–æ–∫ —Ç–µ–ø–µ—Ä —Å–ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤–∑–∞–≥–∞–ª—ñ
    if not published_to_any_channel:
        print(f"[PUBLISH_LOGIC] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ –¥–ª—è –∂–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –ø—ñ—Å–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∂–æ–¥–µ–Ω –∫–∞–Ω–∞–ª, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ checked_ids.
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º
        add_id_to_history_list(history_for_source["checked_ids"], unique_id, MAX_HISTORY_IDS)
        save_json_file(f"{HISTORY_FILE_PREFIX}{source_username}.json", history_for_source)
        print(f"[INFO] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_id} –¥–æ–¥–∞–Ω–æ –¥–æ checked_ids –¥–ª—è {source_username}.")


# --- –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê –°–ö–†–ò–ü–¢–ê (–ó –¶–ò–ö–õ–û–ú –ó–ê–ü–£–°–ö–£) ---
if __name__ == "__main__":
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    print("----------------------------------------------------------------")

    last_alert_status = get_alert_status() 
    # –ù–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–æ—Ç–∫–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–±–æ—é
    post_alert_short_interval_counter = 0

    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [INIT] –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏: {'–ê–∫—Ç–∏–≤–Ω–∞' if last_alert_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}.")

    next_full_check_time = time.time() 
    
    while True:
        current_time = time.time()
        
        current_alert_status = get_alert_status()
        
        # –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤—ñ–¥ —Ç—Ä–∏–≤–æ–≥–∏ –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        if not current_alert_status and last_alert_status:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [TRANSITION] **–ü–û–í–Ü–¢–†–Ø–ù–£ –¢–†–ò–í–û–ì–£ –°–ö–ê–°–û–í–ê–ù–û!** –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ–∞–∑–∏ {5} –∫–æ—Ä–æ—Ç–∫–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤.")
            post_alert_short_interval_counter = 5 # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–∞ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        last_alert_status = current_alert_status 

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∂–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        if current_alert_status:
            current_desired_interval = random.randint(MIN_ALERT_INTERVAL_SEC, MAX_ALERT_INTERVAL_SEC)
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [ALERT_STATUS] –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞. –ë–∞–∂–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {current_desired_interval} —Å–µ–∫.")
            post_alert_short_interval_counter = 0 # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ —Ç—Ä–∏–≤–æ–≥–∞ –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω–∞
        elif post_alert_short_interval_counter > 0:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ –º–∏ –≤ —Ñ–∞–∑—ñ –ø—ñ—Å–ª—è –≤—ñ–¥–±–æ—é
            current_desired_interval = random.randint(MIN_ALERT_INTERVAL_SEC, MAX_ALERT_INTERVAL_SEC)
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [POST_ALERT] –¢—Ä–∏–≤–æ–≥–∏ –Ω–µ–º–∞—î, –≤–∏–∫–æ–Ω—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ ({post_alert_short_interval_counter} –∑–∞–ª–∏—à–∏–ª–æ—Å—å). –ë–∞–∂–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {current_desired_interval} —Å–µ–∫.")
            post_alert_short_interval_counter -= 1 # –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        else:
            current_desired_interval = random.randint(MIN_NORMAL_INTERVAL_SEC, MAX_NORMAL_INTERVAL_SEC)
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [NORMAL_STATUS] –ü–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –Ω–µ–º–∞—î. –ë–∞–∂–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {current_desired_interval} —Å–µ–∫.")

        if current_time >= next_full_check_time:
            print(f"\n--- {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ---")
            print("[MAIN_TASK] –ù–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –æ–∫—Ä–µ–º–æ
            history_data_map = {}
            for source_config in SOURCE_CHANNELS_CONFIG:
                source_username = source_config['username']
                # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ default_data –¥–ª—è published_ids —î —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
                history_data_map[source_username] = load_json_file(
                    f"{HISTORY_FILE_PREFIX}{source_username}.json",
                    {"published_ids": [], "checked_ids": []}
                )
                print(f"[MAIN_TASK] –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è {source_username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")

            # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É-–¥–∂–µ—Ä–µ–ª–∞
            for source_config in SOURCE_CHANNELS_CONFIG:
                source_username = source_config['username']
                print(f"[MAIN_TASK] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∫–∞–Ω–∞–ª—É @{source_username}...")
                
                latest_processed_post_content = parse_source_channel_for_latest_content(
                    source_username, 
                    history_data_map[source_username]
                )

                if latest_processed_post_content:
                    print(f"[MAIN_TASK] –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ø—Ä–æ–π—à–ª–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–∂–µ—Ä–µ–ª–∞ {source_username}. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
                    process_and_publish_message_to_channels(
                        latest_processed_post_content, 
                        history_data_map
                    )
                else:
                    print(f"[MAIN_TASK] –ù–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º, –∑ {source_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
            next_full_check_time = current_time + current_desired_interval
            print(f"[MAIN_TASK] –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞: {datetime.fromtimestamp(next_full_check_time).strftime('%Y-%m-%d %H:%M:%S')}")
            print("--- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ü–∏–∫–ª –æ—Å–Ω–æ–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ ---")
        else:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [WAITING] –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞–Ω–∞–ª—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –ø—Ä–∏–±–ª–∏–∑–Ω–æ {round(next_full_check_time - current_time, 0)} —Å–µ–∫—É–Ω–¥.")

        sleep_duration = random.randint(MIN_CYCLE_SLEEP_SEC, MAX_CYCLE_SLEEP_SEC)
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [SLEEP] –î—Ä—ñ–º–∞—î–º–æ –Ω–∞ {sleep_duration} —Å–µ–∫—É–Ω–¥...")
        time.sleep(sleep_duration)
