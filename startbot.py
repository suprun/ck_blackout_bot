import logging
import sqlite3
import os
from dotenv import load_dotenv
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === .env ===
load_dotenv()

# === Config ===
BOT_TOKEN = os.getenv("BOT_START_TOKEN")

# --- —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
conn = sqlite3.connect("users.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    start_time TEXT,
    is_premium INTEGER DEFAULT 0
)
""")
conn.commit()

# --- –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø–∏ ---
GROUP_LINKS = {
    "1_1": "https://t.me/ck_blackout_1_1",
    "1_2": "https://t.me/ck_blackout_1_2",
    "2_1": "https://t.me/ck_blackout_2_1",
    "2_2": "https://t.me/ck_blackout_2_2",
    "3_1": "https://t.me/ck_blackout_3_1",
    "3_2": "https://t.me/ck_blackout_3_2",
    "4_1": "https://t.me/ck_blackout_4_1",
    "4_2": "https://t.me/ck_blackout_4_2",
    "5_1": "https://t.me/ck_blackout_5_1",
    "5_2": "https://t.me/ck_blackout_5_2",
    "6_1": "https://t.me/ck_blackout_6_1",
    "6_2": "https://t.me/ck_blackout_6_2",
}

# --- emoji –¥–ª—è —á–µ—Ä–≥ ---
QUEUE_EMOJI = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"]

# --- –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

miniapp_url = "https://cherkasyoblenergo.com/static/perelik-gpv"#https://wgis.project.co.ua/pano
# === –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä (—á—ñ—Ç–∫–æ —Ñ–æ—Ä–º—É—é—Ç—å —Ä—è–¥–∫–∏) ===

def build_start_keyboard():
    # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä—è–¥–æ–∫ –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{QUEUE_EMOJI[0]} –ß–µ—Ä–≥–∞", callback_data="queue_1")],
        [InlineKeyboardButton(f"{QUEUE_EMOJI[1]} –ß–µ—Ä–≥–∞", callback_data="queue_2")],
        [InlineKeyboardButton(f"{QUEUE_EMOJI[2]} –ß–µ—Ä–≥–∞", callback_data="queue_3")],
        [InlineKeyboardButton(f"{QUEUE_EMOJI[3]} –ß–µ—Ä–≥–∞", callback_data="queue_4")],
        [InlineKeyboardButton(f"{QUEUE_EMOJI[4]} –ß–µ—Ä–≥–∞", callback_data="queue_5")],
        [InlineKeyboardButton(f"{QUEUE_EMOJI[5]} –ß–µ—Ä–≥–∞", callback_data="queue_6")],
        [InlineKeyboardButton(f"ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é", callback_data="unknown_queue")]
    ])


def build_subkeyboard(queue: int):
    # –ø—ñ–¥—á–µ—Ä–≥–∏ —ñ –Ω–∞–∑–∞–¥
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ö† –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_1"), InlineKeyboardButton("‚Ö° –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_2")],
        [InlineKeyboardButton(f"ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é", callback_data="unknown_queue")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])


def build_subscription_options(key: str):
    # key —è–∫ "3_2"
    group_url = GROUP_LINKS.get(key, "#")
    queue, sub = key.split("_")
    queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ", url=group_url)],
        [InlineKeyboardButton("üí´ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ", callback_data=f"personal_{key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_queue_{queue}")]
    ])

async def subscription_choice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    # –û—á—ñ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    if data.startswith("personal_"):
        key = data.split("personal_")[1]
        queue, sub = key.split("_")
        queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
        group_url = GROUP_LINKS.get(key, '#')

        # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –û–ø–ª–∞—Ç–∏—Ç–∏ / –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
        await send_personal_alert_options(chat_id=query.from_user.id, context=context, queue_label=queue_label, group_url=group_url, key=key)

# === –û–ë–†–û–ë–ù–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cur.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name, start_time) VALUES (?, ?, ?, ?)",
        (user.id, user.username, user.first_name, datetime.now().isoformat())
    )
    conn.commit()

    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name or '–¥—Ä—É–∂–µ'}!\n\n"
        "üí° –©–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ —á–µ—Ä–≥—É —ñ –ø—ñ–¥—á–µ—Ä–≥—É –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:\n\n"
    )

    text = (
        "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É —É –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:\n"
        "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
    )
    await update.message.reply_text(text, reply_markup=build_start_keyboard())


async def queue_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ó–∞—Ö–∏—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: –æ—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç queue_N
    data = query.data
    if not data.startswith("queue_"):
        # –Ω–µ –Ω–∞—à–µ, —ñ–≥–Ω–æ—Ä—É—î–º–æ
        return

    raw = data.split("_")[1]
    if not raw.isdigit():
        return
    queue = int(raw)

    text = (
        f"üìä –í–∏ –æ–±—Ä–∞–ª–∏ <b>{QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥—É</b>.\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –ø—ñ–¥—á–µ—Ä–≥—É:"
    )
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=build_subkeyboard(queue))


async def subqueue_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    # –æ—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç sub_N_M
    if not data.startswith("sub_"):
        return
    parts = data.split("_")
    if len(parts) != 3:
        return
    _, q_str, sub_str = parts
    if not q_str.isdigit() or not sub_str.isdigit():
        return
    queue = int(q_str)
    sub = int(sub_str)
    queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
    key = f"{queue}_{sub}"
    text = (
        f"üîå –í–∏ –æ–±—Ä–∞–ª–∏ <b>{QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥—É</b>, {'‚Ö†' if sub==1 else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥—É.\n\n"
        f"‚Ä¢ üí¨ –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å {queue_label} —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.\n\n"
        "–∞–±–æ\n\n"
        "‚Ä¢ üí´ –û—Ç—Ä–∏–º—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ"
    )
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=build_subscription_options(key))
    

async def back_to_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # pattern back_to_queue_N
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("_")
    if len(parts) < 4:
        # fallback to start
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —á–µ—Ä–≥—É:", reply_markup=build_start_keyboard())
        return
    queue = parts[-1]
    if not queue.isdigit():
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —á–µ—Ä–≥—É:", reply_markup=build_start_keyboard())
        return
    # –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—á–µ—Ä–≥–∏ –¥–ª—è —Ü—å–æ–≥–æ queue
    await query.edit_message_text(
        f"üìä –í–∏ –æ–±—Ä–∞–ª–∏ <b>{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥—É</b>.\n\n–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –ø—ñ–¥—á–µ—Ä–≥—É:",
        parse_mode="HTML",
        reply_markup=build_subkeyboard(int(queue))
    )


async def back_to_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    text = (
        "–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:\n"
        "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
    )
    await query.edit_message_text(text, reply_markup=build_start_keyboard())

async def send_personal_alert_options(chat_id, context: ContextTypes.DEFAULT_TYPE, queue_label, group_url, key):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏: –û–ø–ª–∞—Ç–∏—Ç–∏ 10 Stars —Ç–∞ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
    """


    description = (
    f"  ‚ú® –ü–µ—Ä–µ–≤–∞–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ –±–æ—Ç—ñ:\n\n"
            f"‚è±Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞ 5/10/15 –∞–±–æ 20 —Ö–≤–∏–ª–∏–Ω –¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
            f"üí¨ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–µ–∫—ñ–ª—å–∫–∞ —á–µ—Ä–≥ –≤ –æ–¥–Ω–æ–º—É —á–∞—Ç—ñ\n"             
            f"üåô –í–∏–º–∫–Ω–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É –Ω—ñ—á–Ω–∏–π —á–∞—Å\n"
            f"üîï –ë–µ–∑ —Å–ø–∞–º—É, –ª–∏—à–µ –∫–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
            f"üôè –í–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —Ü–µ–π –ø—Ä–æ—î–∫—Ç. (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–ª–∞—Ç—ñ–∂ 10 ‚≠êÔ∏è ‚âà10‚Ç¥)\n\n"
            f"–∞–±–æ\n\n"
            f"‚Ä¢ üí¨ –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É ¬´–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å {queue_label}¬ª —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ.\n\n"

    )


    keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ –∑–∞ 10 ‚≠êÔ∏è", callback_data=f"buy_{key}")],
    [InlineKeyboardButton(f"üí¨ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ", url=group_url)]
    ])


    await context.bot.send_message(chat_id=chat_id, text=description, reply_markup=keyboard)
# === –û–ø–ª–∞—Ç–∞ Telegram Stars ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("buy_"):
        key = data.split("_", 1)[1]
        q_part, s_part = key.split("_")
        queue = int(q_part)
        sub = int(s_part)
        queue_label = f"{QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub == 1 else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"

        description = (
            f"‚ú® –û—Ç—Ä–∏–º—É—î—Ç–µ –≤—Å—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ –±–æ—Ç—ñ\n\n"
            f"—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç–µ —Ü–µ–π –ø—Ä–æ—î–∫—Ç. –î—è–∫—É—î–º–æ!\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å: 10‚≠êÔ∏è"
        )

        prices = [LabeledPrice("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", 10)]  # 10 Stars
        await context.bot.send_invoice(
            chat_id=query.from_user.id,
            title="‚≠êÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
            description=description,
            payload=f"stars_{key}",
            currency="XTR",
            prices=prices,
            provider_token="",  # –ø–æ—Ä–æ–∂–Ω—ñ–π –¥–ª—è Telegram Stars
            start_parameter="personal_alerts"
        )

        extra_button = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üí¨ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ {queue_label}", url=GROUP_LINKS[key])],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —á–µ—Ä–≥–∏", callback_data="start_over")]
        ])

        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=f"–ê–±–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É {queue_label} —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ",
            reply_markup=extra_button
        )
async def start_over_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ edit_message_text, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ update.callback_query
    if query.message:
        await query.edit_message_text(
            f"üëã –í—ñ—Ç–∞—é, {query.from_user.first_name or '–¥—Ä—É–∂–µ'}!\n\n–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
            reply_markup=build_start_keyboard()
        )
    else:
        await start(update, context)

async def unknown_queue_callback(update, context):
    query = update.callback_query
    await query.answer()

    miniapp_url = "https://cherkasyoblenergo.com/static/perelik-gpv"  # https://wgis.project.co.ua/pano –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π URL Mini App

    miniapp_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –í—ñ–¥–∫—Ä–∏—Ç–∏ –ü–æ—à—É–∫", web_app={"url": miniapp_url})],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="delete_and_back")]
    ])

    await query.message.reply_text(
        "–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—Ç–µ —Å–≤–æ—é —á–µ—Ä–≥—É ‚Äî —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º:",
        reply_markup=miniapp_button
    )


async def pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if not query.invoice_payload.startswith("stars_"):
        await query.answer(ok=False, error_message="–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø–ª–∞—Ç–∏.")
    else:
        await query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    key = payment.invoice_payload.replace("stars_", "")
    user_id = update.effective_user.id

    cur.execute("UPDATE users SET is_premium = 1 WHERE user_id = ?", (user_id,))
    conn.commit()

    await update.message.reply_text(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É 10‚≠êÔ∏è!\n\n"
        f"–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è <b>{key}</b> –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ üîî",
        parse_mode="HTML"
    )

async def delete_and_back_callback(update, context):
    query = update.callback_query
    await query.answer()

    try:
        await query.message.delete()
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# === –ó–ê–ü–£–°–ö ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(queue_choice, pattern="^queue_"))
    app.add_handler(CallbackQueryHandler(subqueue_choice, pattern="^sub_"))
    app.add_handler(CallbackQueryHandler(back_to_queue, pattern="^back_to_queue_"))
    app.add_handler(CallbackQueryHandler(back_to_start_handler, pattern="^back_to_start$"))
    app.add_handler(CallbackQueryHandler(start_over_callback, pattern="^start_over$"))
    app.add_handler(CallbackQueryHandler(button_callback, pattern="^buy_"))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_query))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(CallbackQueryHandler(subscription_choice_callback, pattern="^personal_"))
    app.add_handler(CallbackQueryHandler(unknown_queue_callback, pattern="^unknown_queue$"))
    app.add_handler(CallbackQueryHandler(delete_and_back_callback, pattern="^delete_and_back$"))


    app.run_polling()


if __name__ == "__main__":
    main()
