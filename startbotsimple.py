import os
import asyncio
import aiosqlite
import nest_asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import aiohttp
# === .env ===
load_dotenv()

# === Config ===
BOT_TOKEN = os.getenv("BOT_START_TOKEN")
DB_PATH = os.getenv("DATABASE_PATH", "users.db")
MINIAPP_URL = os.getenv("MINIAPP_URL", "https://www.cherkasyoblenergo.com/off")
PDF_URL = os.getenv("PDF_URL", "https://storage.googleapis.com/ck_blackout_pdf/")

QUEUE_EMOJI = ["üî¥1Ô∏è‚É£", "üü†2Ô∏è‚É£", "üü¢3Ô∏è‚É£", "üîµ4Ô∏è‚É£", "üü£5Ô∏è‚É£", "üü°6Ô∏è‚É£"]
GROUP_LINKS = {f"{i}_{j}": f"https://t.me/ck_blackout_{i}_{j}" for i in range(1, 7) for j in (1, 2)}

# === Logging ===
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# === DB ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                start_time TEXT,
                queue INTEGER,
                subqueue INTEGER
            )
            """
        )
        await db.commit()

# === Keyboards ===

def start_keyboard():
    rows = [[InlineKeyboardButton(f"{QUEUE_EMOJI[i]} –ß–µ—Ä–≥–∞", callback_data=f"queue_{i+1}")] for i in range(6)]
    rows.append([InlineKeyboardButton("ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é", callback_data="unknown_queue")])
    return InlineKeyboardMarkup(rows)

def sub_keyboard(queue: int):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Ö† –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_1"),
            InlineKeyboardButton("‚Ö° –ø—ñ–¥—á–µ—Ä–≥–∞", callback_data=f"sub_{queue}_2"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")], [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])

def subscription_keyboard(key: str):
    group_url = GROUP_LINKS.get(key, "#")
    queue, sub = key.split("_")
    queue_label = f"{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª ¬´{queue_label}¬ª", url=group_url)],        
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_queue_{queue}"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],[InlineKeyboardButton("üíñ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", callback_data="support_project_from_sub")],
    ])

def support_keyboard(back_cb: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠êÔ∏è 5", callback_data="donate_5"), InlineKeyboardButton("‚≠êÔ∏è 10", callback_data="donate_10")],
        [InlineKeyboardButton("‚≠êÔ∏è 20", callback_data="donate_20"), InlineKeyboardButton("‚≠êÔ∏è 50", callback_data="donate_50")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)],
    ])

def unknown_keyboard(back_cb: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É (Mini App)", web_app={"url": MINIAPP_URL})],
        [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤ PDF", callback_data="show_pdfs")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])

def reply_main_menu():
    return ReplyKeyboardMarkup(
        [["üìã –í–∏–±—Ä–∞—Ç–∏ —á–µ—Ä–≥—É", "üí¨ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤"], ["üîç –ó–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É", "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞"]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

def channels_keyboard():
    rows = []
    for key, url in GROUP_LINKS.items():
        q, s = key.split("_")
        label = f"{QUEUE_EMOJI[int(q)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if s=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
        rows.append([InlineKeyboardButton(label, url=url)])
    return InlineKeyboardMarkup(rows)

def about_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíñ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", callback_data="support_project_from_about")]
    ])

# === Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, start_time) VALUES (?, ?, ?, ?)",
            (user.id, user.username, user.first_name, datetime.now().isoformat()),
        )
        await db.commit()

    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name or '–¥—Ä—É–∂–µ'}!\n–ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ —Å–≤–æ—é —á–µ—Ä–≥—É —ñ –ø—ñ–¥—á–µ—Ä–≥—É\n\n‚¨áÔ∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —á–µ—Ä–≥—É:",
        reply_markup=start_keyboard(),
    )

async def queue_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    queue = int(query.data.split("_")[1])
    await query.edit_message_text(
        f"üìä –í–∏ –æ–±—Ä–∞–ª–∏ {QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥—É. \n\n–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—á–µ—Ä–≥—É:",
        reply_markup=sub_keyboard(queue),
    )

async def sub_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, queue, sub = query.data.split("_")
    key = f"{queue}_{sub}"
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET queue=?, subqueue=? WHERE user_id=?",
            (queue, sub, query.from_user.id),
        )
        await db.commit()
    await query.edit_message_text(
        f"üîå –û–ö, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª \n¬´{QUEUE_EMOJI[int(queue)-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if sub=='1' else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞¬ª, \n—â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó:",
        reply_markup=subscription_keyboard(key),
    )

async def support_project(update: Update, context: ContextTypes.DEFAULT_TYPE, back_cb="back_to_support_prev"):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üôè –î—è–∫—É—î–º–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç!\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ—á–æ–∫:",
        reply_markup=support_keyboard(back_cb),
    )

async def donate_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    stars = query.data.split("_")[1]
    prices = [LabeledPrice(f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—î–∫—Ç—É –Ω–∞ {stars}‚≠êÔ∏è", int(stars))]
    await context.bot.send_invoice(
        chat_id=query.from_user.id,
        title="üíñ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç",
        description=f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—î–∫—Ç—É –Ω–∞ {stars}‚≠êÔ∏è",
        payload=f"donation_{stars}",
        currency="XTR",
        prices=prices,
        provider_token="",
        start_parameter="support_project",
    )

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stars = update.message.successful_payment.total_amount
    await update.message.reply_text(f"üíñ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø—Ä–æ—î–∫—Ç—É! –í–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª–∏ {stars}‚≠êÔ∏è ‚ú®")

async def unknown_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    back_cb = "back_to_start"
    await query.edit_message_text(
        "ü§∑‚Äç‚ôÇÔ∏è –ù–µ –∑–Ω–∞—î—Ç–µ —Å–≤–æ—é —á–µ—Ä–≥—É? \n–ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É —É –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:",
        reply_markup=unknown_keyboard(back_cb),
    )

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É:", reply_markup=start_keyboard())

async def back_to_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    queue = int(query.data.split("_")[-1])
    await query.edit_message_text(
        f"üìä –í–∏ –æ–±—Ä–∞–ª–∏ {QUEUE_EMOJI[queue-1]} —á–µ—Ä–≥—É. –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—á–µ—Ä–≥—É:",
        reply_markup=sub_keyboard(queue),
    )

async def back_to_support_prev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT queue, subqueue FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
    if row and row[0] and row[1]:
        key = f"{row[0]}_{row[1]}"
        await query.edit_message_text(
            f"–û–ö, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª \n¬´{QUEUE_EMOJI[int(row[0])-1]} —á–µ—Ä–≥–∞ {'‚Ö†' if row[1]==1 else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞¬ª, \n—â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.",
            reply_markup=subscription_keyboard(key),
        )
    else:
        await back_to_start(update, context)

# === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.reply_text("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_main_menu())
    else:
        await update.message.reply_text("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_main_menu())

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üìã –í–∏–±—Ä–∞—Ç–∏ —á–µ—Ä–≥—É":
        await update.message.reply_text("‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É:", reply_markup=start_keyboard())
    elif text == "üí¨ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤":
        await update.message.reply_text("üì¢ –ö–∞–Ω–∞–ª–∏ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:", reply_markup=channels_keyboard())
    elif text == "üîç –ó–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É":
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù–µ –∑–Ω–∞—î—Ç–µ —Å–≤–æ—é —á–µ—Ä–≥—É? \n–ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É —É –≥—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å:", reply_markup=unknown_keyboard("back_to_start"))
    elif text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞":
        await update.message.reply_text(
            "‚ÑπÔ∏è –ë–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è —É –ß–µ—Ä–∫–∞—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.\n\n–ù–µ —î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üíñ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", callback_data="support_project_from_about")]]),
        )

async def back_to_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚ÑπÔ∏è –ë–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —É –ß–µ—Ä–∫–∞—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ.\n\n–ù–µ —î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíñ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", callback_data="support_project_from_about")]
        ]),
    )

# === –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ PDF ===
def pdf_download_keyboard(back_cb: str):
    rows = []
    for i in range(1, 7):
        for j in (1, 2):
            emoji = QUEUE_EMOJI[i - 1]
            label = f"{emoji} —á–µ—Ä–≥–∞ {'‚Ö†' if j == 1 else '‚Ö°'} –ø—ñ–¥—á–µ—Ä–≥–∞"
            callback = f"download_pdf_{i}{j}"
            rows.append([InlineKeyboardButton(label, callback_data=callback)])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)])
    return InlineKeyboardMarkup(rows)

# === –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É PDF ===
async def show_pdfs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üìÑ –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ —á–µ—Ä–≥–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
        reply_markup=pdf_download_keyboard("unknown_queue")
    )

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF-—Ñ–∞–π–ª—É –∑ URL —ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ===
async def download_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pdf_id = query.data.replace("download_pdf_", "")
    pdf_url = f"https://storage.googleapis.com/ck_blackout_pdf/–ì—Ä–∞—Ñ—ñ–∫_—á–µ—Ä–≥–∞_{pdf_id}.pdf"
    file_name = f"–ì—Ä–∞—Ñ—ñ–∫_{pdf_id}.pdf"

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loading_msg = await query.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(pdf_url) as resp:
                if resp.status == 200:
                    # –§–∞–π–ª —ñ—Å–Ω—É—î ‚Üí Telegram —Å–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å –π–æ–≥–æ –Ω–∞–ø—Ä—è–º—É
                    await query.message.reply_document(document=pdf_url, filename=file_name)
                elif resp.status == 404:
                    await query.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, —â–µ –Ω–µ –æ–Ω–æ–≤–∏–ª–∏ –≥—Ä–∞—Ñ—ñ–∫.")
                else:
                    await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É (–∫–æ–¥ {resp.status}).")
    except Exception as e:
        await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–∞–π–ª—É: {e}")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await loading_msg.delete()

# === –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ main() ===



# === Main ===
async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ. –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ .env –∞–±–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    await init_db()

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_main_menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_command))
    app.add_handler(CallbackQueryHandler(queue_choice, pattern="^queue_"))
    app.add_handler(CallbackQueryHandler(sub_choice, pattern="^sub_"))
    app.add_handler(CallbackQueryHandler(lambda u, c: support_project(u, c, "back_to_support_prev"), pattern="^support_project_from_sub$"))
    app.add_handler(CallbackQueryHandler(lambda u, c: support_project(u, c, "back_to_about"), pattern="^support_project_from_about$"))
    app.add_handler(CallbackQueryHandler(donate_choice, pattern="^donate_"))
    app.add_handler(CallbackQueryHandler(unknown_queue, pattern="^unknown_queue$"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    app.add_handler(CallbackQueryHandler(back_to_queue, pattern="^back_to_queue_"))
    app.add_handler(CallbackQueryHandler(back_to_support_prev, pattern="^back_to_support_prev$"))
    app.add_handler(CallbackQueryHandler(back_to_about, pattern="^back_to_about$"))
    app.add_handler(CallbackQueryHandler(show_main_menu, pattern="^main_menu$"))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    app.add_handler(CallbackQueryHandler(show_pdfs, pattern="^show_pdfs$"))
    
    app.add_handler(CallbackQueryHandler(download_pdf, pattern="^download_pdf_"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ —É—Ç–æ—á–Ω–µ–Ω–∏–º –¥—ñ–∞–ª–æ–≥–æ–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
